openapi: 3.1.0

info:
  title: "NPP API Specification" 
  version: "1.0.0"

  description: |-
   # Introduction
   The National Parking Platform (NPP) is a backend system that enables all connected clients  to exchange parking information, considering their respective roles:
               
   * Parking Operator
   * Parking Service Provider
   * Connected Supplier
                   
   The NPP is a so-called headless system, mainly communicating via an application programming interface (API). This API is based on APDS, the parking data exchange model and format standardised by the Alliance for Parking Data Standards. This document specifies the APDS subset used by the NPP, supplemented by some extensions the publication of which is still pending. The currently released version of APDS is version 4.  

   ### All connected NPP clients must adhere to the interface specification set out here.                

   # APDS Scope
   ## APDS Data Domains
   The APDS model defines a number of data domains:
   * Place
   * Occupancy
   * Rate
   * Right
   * Session
   * Quote
   * Oberservation

   The official APDS specification documents can be request via the [APDS website](https://www.allianceforparkingdatastandards.org 'APDS website').

   ## APDS Domains NOT used by the NPP
   The current version of the NPP does not engage all APDS-defined data domains / model packages. In particular, the following parts are not used:

   * Quote
   * Observation
   * Electrical Infrastructure (sub-package of Place) – might be added later

   ## Non-APDS Domains used by the NPP
   Note: the NPP endpoints defined to cover __Reconciliation__ and __Observability__ are not defined in the APDS standard and hence have been specified as project-specific interface components.



servers:
  - url: "https://staging-api.npp.org.uk"
  - url: "https://api.npp.org.uk"

tags:
  - name: Assigned Rights
    description: |- 
      In APDS, _Assigned Rights_ are the representation of parking rights. _Assigned Rights_ are issued by parking operators and/or service providers. As soon as a parking right has been issued to a driver, it is sent to the NPP by the issuing entity. _Assigned Rights_ are the most important source of information for connected enforcement systems to check the eligibility of a parked vehicle.
  - name: Places
    description: |-
      The _Place_ Hierarchy endpoints accept/provide details about parking locations (_Places_).
  - name: Rate Tables
    description: |-
      The _Rates_ endpoints accept/provide information about tariffs. While a tariff is a separately identifyable entity, its applicability is defined via a referencing _RateEligibility_ definition (as part of a corresponding _Right Specification_).
  - name: Right Specifications
    description: |-
      The _Right Specifications_ endpoints accept/provide information about charging hours, eligibility criteria and point to applicable tariffs. Each _Right Specification_ applies to one or more _Places_. 
  - name: Sessions
    description: |-
      In APDS, _Sessions_ describe the act of actively making use of a previously-obtained parking right (_Assigned Right_). When drivers park their vehicles or leave the parking location, the service provider’s backend or the operator’s parking management system report this to the NPP. _Session_ data can later be read from the NPP to support use cases like .e.g.
      * checking a challenged PCN (e.g. via the _Session Viewer_ application)
      * checking the details of a parking session (via an enforcement system)
  - name: Reconciliation
    description: |-
      Whilst the multi-vendor capability introduced by the NPP provides a high level of convenience to drivers, it makes the reconciliation process more complicated. The NPP offers a monthly consolidated reconciliation report. Operators can thus ensure that they have received all the parking fees to which they are entitled from the service providers. For this purpose, all service providers must submit detailed reconciliation information to the NPP, which then creates the above-mentioned consolidated view based on this input.
  - name: Observability
    description: |-
      Alerts, Health, Performance Status Information  
      The NPP is constantly monitoring pre-defined performance indicators. Events that require connected clients to be notified, will trigger a corresponding alert. The NPP differentiates between one-time alerts and repeating alerts. Whilst one-time alerts do not repeat, repeating alerts can recur as long as the undesirable state persists. The standard mechanism to share an alert is defined by its action (e.g. send email notification, push to client-provided notification endpoint). In addition, the NPP offers an endpoint for querying alerts/events that have occurred within a specified period of time. To subscribe to push alerts, please use the NPP’s /webhooks endpoint (see _Subscriptions_). The topic to subscribe to is _SystemEvents_. Please note that the push mechanism considers client roles and permissions.

  - name: Subscription
    description: |-
      For _Assigned Right_ information, _Session Data_, and _System Events_, the NPP offers both, PULL and PUSH mode. The latter is implemented in form of webhooks. An interested entity can subscribe to one or more topics, potentially for a subset of the active NPP parking locations. 

paths:

  # ===== Places ===== #

  /places:

    get:
      summary: List Places
      security:
        - oAuth:
            - po
            - sp
            - ep
            - ad
      description: |-
        Returns a list of places potentially filtered by a combination of :
        * __latitude__, __longitude__ and __radius__ : retrieve all places within a geographic area,
        * __types__ : retrieve all places of the given type,
        * __right_type__ : retrieve all places associated with the right specification type,
        * __structure_type__ : retrieve all places associated with the specified structure type,
        * __structure_grade__ : retrieve all places associated with the specified structure grade,
        * __name__ : retrieve all places which match the name of the facilities,
        * __layer__ : specify the maximum hierarchy element layer desired,
        * __modified_since__ : retrieve all places that have changed from that given instant onwards,
        * __expand__ : a comma-separated list of optional object attributes associated to a place that should be included in the result set.
      operationId: get-places
      tags:
        - Places
      parameters:
        - $ref: '#/components/parameters/latitude'
        - $ref: '#/components/parameters/longitude'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/place_types'
        - $ref: '#/components/parameters/right_spec_types'
        - $ref: '#/components/parameters/structure_type'
        - $ref: '#/components/parameters/structure_grade'
        - $ref: '#/components/parameters/place_name'
        - $ref: '#/components/parameters/place_layer'
        - $ref: '#/components/parameters/modified_since'
        - $ref: '#/components/parameters/places_expand'
        - $ref: '#/components/parameters/page'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyElementList'

    post:
      summary: Create Place
      security:
        - oAuth:
            - po
      description: Create a new place.
      operationId: create-place
      tags:
        - Places
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HierarchyElement'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: ok
                    code: 201
                    message: Place created successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Place can not be created due to missing required attributes.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Place can not be created due to conflicting data.

  /places/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique identifier for the place.

    get:
      summary: Get Place
      security:
        - oAuth:
            - po
            - sp
            - ep
            - ad
      description: Returns the latest version of a given place by its identifier (or a specific version provided as a query parameter).
      operationId: get-place
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/places_expand'
      tags:
        - Places
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyElement'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                not_found:
                  value:
                    status: error
                    code: 404
                    message: Place not found.

    put:
      summary: Update Place
      security:
        - oAuth:
            - po
      description: Update an existing place using its identifier.
      operationId: update-place
      tags:
        - Places
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HierarchyElement'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: Place updated successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Place can not be updated due to missing required attributes.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Place can not be updated as it has not been found.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Place can not be updated due to conflicting data.

    delete:
      summary: Delete Place
      security:
        - oAuth:
            - po
      description: Delete an existing place using its identifier.
      operationId: delete-place
      tags:
        - Places
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: Place deleted successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Place can not be deleted due to missing required attributes.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Place can not be deleted as it has not been found.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Place can not be deleted due to conflicting data.

  # ===== Right Specifications ===== #

  /rights/specs:

    get:
      summary: List RightSpecifications
      security:
        - oAuth:
            - po
            - sp
            - ep
            - ad
      description: |-
        Returns a list of right specifications potentially filtered by a combination of :
        * __latitude__, __longitude__ and __radius__ : retrieve all right specifications used in a geographic area (via their associated place),
        * a list of __Places__ : retrieve all right specifications connected to any of the given places,
        * __modified_since__ : retrieve all right specifications that have changed from that given instant onwards, 
        * __expand__ : a comma-separated list of optional object attributes associated to a right specification that should be included in the result set.
      operationId: get-right_specs
      tags:
        - Right Specifications
      parameters:
        - $ref: "#/components/parameters/latitude"
        - $ref: "#/components/parameters/longitude"
        - $ref: "#/components/parameters/radius"
        - $ref: "#/components/parameters/place_ids"
        - $ref: "#/components/parameters/place_types"
        - $ref: "#/components/parameters/modified_since"
        - $ref: '#/components/parameters/right_specs_expand'
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RightSpecificationList'

    post:
      summary: Create RightSpecification
      security:
        - oAuth:
            - po
      description: Create a new right specification.
      operationId: create-right_specs
      tags:
        - Right Specifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RightSpecification'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: ok
                    code: 201
                    message: RightSpecification created successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: RightSpecification can not be created due to missing required attributes.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: RightSpecification can not be created due to conflicting data.

  /rights/specs/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique identifier for the right specification.

    get:
      summary: Get RightSpecification
      security:
        - oAuth:
            - po
            - sp
            - ep
            - ad
      description: Returns the latest version of a given right specification by its identifier (or the specific version provided as a query parameter).
      operationId: get-right_spec
      tags:
        - Right Specifications
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/right_specs_expand'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RightSpecification'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not_found:
                  value:
                    status: error
                    code: 404
                    message: RightSpecification not found.

    put:
      summary: Update RightSpecification
      security:
        - oAuth:
            - po
      description: Update an existing right specification
      operationId: update-right_spec
      tags:
        - Right Specifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RightSpecification'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: RightSpecification updated successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: RightSpecification can not be updated due to missing required attributes.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: RightSpecification can not be updated as it has not been found.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: RightSpecification can not be updated due to conflicting data.

    delete:
      summary: Delete RightSpecification
      security:
        - oAuth:
            - po
      description: Delete an existing right specification using its identifier.
      operationId: delete-right_spec
      tags:
        - Right Specifications
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: RightSpecification deleted successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: RightSpecification can not be deleted due to missing required attributes.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: RightSpecification can not be deleted as it has not been found.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: RightSpecification can not be deleted due to conflicting data.

  # ===== Rates ===== #

  /rates:

    get:
      summary: List RateTables
      security:
        - oAuth:
            - po
            - sp
            - ep
            - ad
      description: |-
        Returns a list of rate potentially filtered by a combination of : 
        * __latitude__, __longitude__ and __radius__ : retrieve all rates used in a geographic area (via their associated assigned rights and place), 
        * a list of __places__ : retrieve all rates connected to assigned rights that belong to any of the given places, 
        * a list of __right specifications__ : retrieve all rates connected to any of the given right specifications, 
        * __modified_since__ : retrieve all rates that have changed from that given instant onwards, 
        * __expand__ : a comma-separated list of optional object attributes associated to a rate that should be included in the result set.
      operationId: get-rates
      tags:
        - Rate Tables
      parameters:
        - $ref: "#/components/parameters/latitude"
        - $ref: "#/components/parameters/longitude"
        - $ref: "#/components/parameters/radius"
        - $ref: "#/components/parameters/place_ids"
        - $ref: "#/components/parameters/right_spec_ids"
        - $ref: "#/components/parameters/modified_since"
        - $ref: "#/components/parameters/rates_expand"
        - $ref: '#/components/parameters/page'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateTableList"

    post:
      summary: Create RateTable
      security:
        - oAuth:
            - po
      description: Create a new rate table.
      operationId: create-rate
      tags:
        - Rate Tables
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateTable"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"

  /rates/{id}:

    parameters:
      - schema:
          type: "string"
        name: "id"
        in: "path"
        required: true
        description: Unique identifier for the rate table.

    get:

      summary: Get RateTable
      security:
        - oAuth:
            - po
            - sp
            - ep
            - ad
      description: Returns the latest version of a given rate table by its identifier (or the specific version provided as a query parameter).
      operationId: get-rate
      tags:
        - Rate Tables
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/rates_expand"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateTable"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                ok:
                  value:
                    status: error
                    code: 404
                    message: Rate table not found.

    put:

      summary: Update RateTable
      security:
        - oAuth:
            - po
      description: Update an existing rate table using its identifier, by providing new attributes.
      operationId: update-rate
      tags:
        - Rate Tables
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateTable"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Rate table can not be updated due to missing required attributes.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Rate table can not be updated as it has not been found.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Rate table can not be updated due to conflicting data.

    delete:
      summary: Delete RateTable
      security:
        - oAuth:
            - po
      description: Delete an existing rate table using its identifier.
      operationId: delete-rate
      tags:
        - Rate Tables
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: Rate table deleted successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Rate table can not be deleted due to missing required attributes.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Rate table can not be deleted as it has not been found.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Rate table can not be deleted due to conflicting data.

  # ====== Sessions ====== #

  /sessions:

    get:
      summary: List Sessions
      security:
        - oAuth:
            - po
            - sp
            - ep
            - ad
      description: |-
        Returns a list of sessions potentially filtered by a combination of : 
        * __latitude__, __longitude__ and __radius__ : retrieve all sessions occurring in a geographic area (via their associated place), 
        * a list of __Places__ : retrieve all sessions connected to any of the given places, 
        * a list of __RightSpecifications__ : retrieve all sessions with segments using any of the given right specifications, 
        * a list of __Credentials__ : retrieve all sessions linked to the given credentials, 
        * __start_before__ : retrieve all sessions starting before that given instant, 
        * __end_before__ : retrieve all sessions ending before that given instant, 
        * __start_after__ : retrieve all sessions starting after that given instant, 
        * __end_after__ : retrieve all sessions ending after that given instant, 
        * __modified_since__ : retrieve all sessions that have changed from that given instant onwards, 
        * __expand__ : a comma-separated list of optional object attributes associated to a session or its segment.s that should be included in the result set.
      operationId: get-sessions
      tags:
        - Sessions
      parameters:
        - $ref: "#/components/parameters/latitude"
        - $ref: "#/components/parameters/longitude"
        - $ref: "#/components/parameters/radius"
        - $ref: "#/components/parameters/place_ids"
        - $ref: "#/components/parameters/place_types"
        - $ref: "#/components/parameters/credential_ids"
        - $ref: "#/components/parameters/credential_types"
        - $ref: "#/components/parameters/right_spec_ids"
        - $ref: "#/components/parameters/right_spec_types"
        - $ref: "#/components/parameters/start_before"
        - $ref: "#/components/parameters/end_before"
        - $ref: "#/components/parameters/start_after"
        - $ref: "#/components/parameters/end_after"
        - $ref: "#/components/parameters/modified_since"
        - $ref: "#/components/parameters/sessions_expand"
        - $ref: '#/components/parameters/page'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionList"

    post:
      summary: Create Session
      security:
        - oAuth:
            - sp
      description: Creates a new session, along with one or more segment.s.
        It also allows the creation of assigned rights, for scenarios in which they must be created simultaneously (e.g. off-street and on-street short stays).
      operationId: create-session
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Session"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: ok
                    code: 201
                    message: Session created successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Session can not be created due to missing required attributes.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Session can not be created due to conflicting data.

  /sessions/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique identifier for the session.

    get:
      summary: Get Session
      security:
        - oAuth:
            - po
            - sp
            - ep
            - ad
      description: Returns the latest version of a given session by its identifier (or the specific version provided as a query parameter).
      operationId: get-session
      tags:
        - Sessions
      parameters:
        - $ref: "#/components/parameters/version"
        - $ref: "#/components/parameters/sessions_expand"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                not_found:
                  value:
                    status: error
                    code: 404
                    message: Session not found.

    put:
      summary: Update Session
      security:
        - oAuth:
            - sp
      description: Updates an existing session using its identifier, by providing new attributes. Segments may also be deleted by removing them from the list of segments in the session.
      operationId: update-session
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Session"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: Session updated successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Session can not be updated due to missing required attributes.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Session can not be updated as it has not been found.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Session can not be updated due to conflicting data.

    delete:
      summary: Delete Session
      security:
        - oAuth:
            - sp
      description: Deletes an existing session using its identifier. segments should be deleted by updating the session instead.
      operationId: delete-session
      tags:
        - Sessions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: Session deleted successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Session can not be deleted due to missing required attributes.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Session can not be deleted as it has not been found.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Session can not be deleted due to conflicting data.

  # ====== Assigned Rights ====== #

  /rights/assigned:

    get:
      summary: List AssignedRights
      security:
        - oAuth:
            - po
            - sp
            - ep
            - ad
      description: |-
        Returns a list of assigned rights potentially filtered by a combination of :
        * __latitude__, __longitude__ and __radius__ : retrieve all assigned rights occurring in a geographic area (via their associated place)
        * a list of __places__ : retrieve all assigned rights connected to any of the given places,
        * a list of __right specifications__ : retrieve all assigned rights with segments using any of the given right specifications, 
        * a list of __credentials__ : retrieve all assigned rights linked to the given credentials,
        * __start_before__ : retrieve all assigned rights starting before that given instant, 
        * __end_before__ : retrieve all assigned rights ending before that given instant, 
        * __start_after__ : retrieve all assigned rights starting after that given instant, 
        * __end_after__ : retrieve all assigned rights ending after that given instant, 
        * __modified_since__ : retrieve all assigned rights that have changed from that given instant onwards, 
        * __expand__ : a comma-separated list of optional object attributes associated to an assigned right that should be included in the result set.
      operationId: get-assigned_rights
      tags:
        - Assigned Rights
      parameters:
        - $ref: "#/components/parameters/latitude"
        - $ref: "#/components/parameters/longitude"
        - $ref: "#/components/parameters/radius"
        - $ref: "#/components/parameters/place_ids"
        - $ref: "#/components/parameters/place_types"
        - $ref: "#/components/parameters/credential_ids"
        - $ref: "#/components/parameters/credential_types"
        - $ref: "#/components/parameters/right_spec_ids"
        - $ref: "#/components/parameters/right_spec_types"
        - $ref: "#/components/parameters/start_before"
        - $ref: "#/components/parameters/end_before"
        - $ref: "#/components/parameters/start_after"
        - $ref: "#/components/parameters/end_after"
        - $ref: "#/components/parameters/modified_since"
        - $ref: "#/components/parameters/assigned_expand"
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedRightList'

    post:
      summary: Create AssignedRight
      security:
        - oAuth:
            - sp
      description: Create a new assigned right based on a given object.
      operationId: create-assigned_right
      tags:
        - Assigned Rights
      requestBody:
        required: true
        description: This method allows an issuer to assign a parking right specification to a holder
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignedRight'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: Assigned right created successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Assigned right can not be created due to missing required attributes.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Assigned right can not be created due to conflicting data.

  /rights/assigned/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        description: Unique identifier for the assigned right.
        required: true

    get:
      summary: Get AssignedRight
      security:
        - oAuth:
            - po
            - sp
            - ep
            - ad
      description: Returns the latest version of a given assigned right by its identifier (or a specific version provided as a query parameter).
      operationId: get-assigned_right
      tags:
        - Assigned Rights
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/assigned_expand'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedRight'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not_found:
                  value:
                    status: error
                    code: 404
                    message: Assigned right not found.

    put:
      summary: Update AssignedRight
      security:
        - oAuth:
            - sp
      description: Update an existing assigned right using its identifier, by providing new attributes. If the provided quote refers to a session extension, this request shall also update the referenced session.
      operationId: update-assigned_right
      tags:
        - Assigned Rights
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignedRight'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: Assigned right updated successfully.
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: Assigned right created successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Assigned right can not be created due to missing required attributes.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Assigned right can not be created due to conflicting data.

    delete:
      summary: Delete AssignedRight
      security:
        - oAuth:
            - sp
      description: Delete an existing assigned right using its identifier.
      operationId: delete-assigned_right
      tags:
        - Assigned Rights
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                ok:
                  value:
                    status: ok
                    code: 200
                    message: Assigned right deleted successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Assigned right can not be deleted due to missing required attributes.
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Assigned right can not be deleted as it has not been found.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseStatus"
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Assigned right can not be deleted due to conflicting data.

  /webhooks:
    post:
      summary: subscribe to one or more event topics
      operationId: post-webhooks
      tags:
        - Subscription
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSubscription'
            examples:
              sysEvents:
                summary: subscribe to system events
                value: 
                  {
                    "endpoint": "https://mybackend.event-notifications.com",
                    "topics": [ "SystemEvents"]
                  }

      callbacks:
        systemAlert:
          "{$request.body#/endpoint}":
            post:
              summary: report a system alert (or its resolution)
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/SystemAlert'
                    examples:
                      responseTimeAlert:
                        summary: notification of degraded response time
                        value:
                          {
                            "id": "c7874361-cdca-467d-a389-f9ab6b8e411c",
                            "timestamp": "2025-05-01T17:12:02Z",
                            "start": "2025-05-01T17:11:52Z",
                            "type": "triggered",
                            "metric": "npp.api.responsetime.average",
                            "condition": "acceptable threshold of 10 seconds exceeded for more than 5 minutes",
                            "description": "The average response time continues to be above the acceptable threshold of 10 seconds. The NPP team has identified the issue and is working on its resolution.",
                            "impact": ["responseTime"]
                          }
              responses:
                '200':
                  description: OK

  /observability/status:
    put:
      operationId: get-status-snapshot
      tags:
        - Observability
      summary: get a status snapshot with relevant metrics
      description: retrieve a current status snapshot with a set of key metrics
      requestBody:
        required: false
        description: |
          optional set of requested metrics with optional filter criteria  
          in the example, only KPIs for service providers PROVIDER1 and PROVIDER2 shall be returned
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SystemMetric'
            examples:
              providerFilter:
                summary: filter by two specific service providers
                value:
                  - name: npp.ingestion.dataset.sessions.count
                    filters:
                      - type: service-provider
                        values: ["PROVIDER1","PROVIDER2"]

      responses:
        200:
          description: list of KPIs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SystemMetric'
              examples:
                metricResponse:
                  summary: sample response with minute granularity
                  value:
                    [
                      {
                        "name": "npp.ingestion.dataset.sessions.count",
                        "description": "number of recently received session records",
                        "filters": [
                          {
                            "type": "time-range",
                            "start": "2025-05-02T12:00:00Z",
                            "end": "2025-05-02T12:05:00Z",
                            "granularity": "minute"
                          },
                          {
                            "type": "service-provider",
                            "values": ["PROVIDER1","PROVIDER2"]
                          }
                        ],
                        "aggregator": "sum",
                        "groupBy": ["service-provider"],
                        "dataPoints": [
                          { "timestamp": "2025-05-02T12:00:00Z", "primaryGroup": "PROVIDER1", "value": 16},
                          { "timestamp": "2025-05-02T12:01:00Z", "primaryGroup": "PROVIDER1", "value": 11},
                          { "timestamp": "2025-05-02T12:02:00Z", "primaryGroup": "PROVIDER1", "value": 2},
                          { "timestamp": "2025-05-02T12:03:00Z", "primaryGroup": "PROVIDER1", "value": 7},
                          { "timestamp": "2025-05-02T12:04:00Z", "primaryGroup": "PROVIDER1", "value": 5},
                          { "timestamp": "2025-05-02T12:00:00Z", "primaryGroup": "PROVIDER2", "value": 11},
                          { "timestamp": "2025-05-02T12:01:00Z", "primaryGroup": "PROVIDER2", "value": 18},
                          { "timestamp": "2025-05-02T12:02:00Z", "primaryGroup": "PROVIDER2", "value": 20},
                          { "timestamp": "2025-05-02T12:03:00Z", "primaryGroup": "PROVIDER2", "value": 9},
                          { "timestamp": "2025-05-02T12:04:00Z", "primaryGroup": "PROVIDER2", "value": 2}
                        ]
                      }
                    ]

components:

  securitySchemes:
  
    oAuth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.npp.org.uk/auth
          scopes:
            po: Parking Operator
            sp: Service Provider
            ep: Enforcement Provider
            ad: Administrator

  
  parameters:

    # ===== Generic ===== #

    page:
      schema:
        type: integer
        minimum: 1
      in: query
      name: page
      description: The page number for paginated responses.

    version:
      schema:
        type: integer
        minimum: 1
      in: query
      name: version
      description: Previous version number. Useful when a reference to a resource version is found in another dataset, and that version is no longer the latest one. Latest version is assumed when this parameter is not used.

    latitude:
      schema:
        type: number
        format: float
      in: query
      name: latitude
      description: Location latitude to use as filter (mandatory if __longitude__ and __radius__ are defined)

    longitude:
      schema:
        type: number
        format: float
      in: query
      name: longitude
      description: Location longitude to use as filter (mandatory if __latitude__ and __radius__ are defined)

    radius:
      schema:
        type: integer
        minimum: 0
      in: query
      name: radius
      description: Number of metres to use as search filter from given position (mandatory if __latitude__ and __longitude__ are defined)

    start_after:
      schema:
        type: integer
        minimum: 0
      in: query
      name: start_after
      description: Unix epoch __instant__ to filter results starting after the given instant.

    end_after:
      schema:
        type: integer
        minimum: 0
      in: query
      name: end_after
      description: Unix epoch __instant__ to filter results ending after the given instant.

    start_before:
      schema:
        type: integer
        minimum: 0
      in: query
      name: start_before
      description: Unix epoch __instant__ to filter results starting before the given instant.

    end_before:
      schema:
        type: integer
        minimum: 0
      in: query
      name: end_before
      description: Unix epoch __instant__ to filter results ending before the given instant.

    modified_since:
      schema:
        type: integer
        minimum: 0
      in: query
      name: modified_since
      description: Unix epoch __instant__ to filter results that have changed or have been deleted after the given instant. If __expand__ attributes are requested, then this parameter will also apply to those objects. When this attribute is used, the result set will also include a list of deleted references to avoid storing stale data.

    # ===== Credentials ===== #

    credential_types:
      schema:
        type: array
        items:
          $ref: "#/components/schemas/CredentialTypeEnum"
      name: credential_type
      in: query
      description: Comma-separated list of credential types to consider. All will be assumed if parameter is not used or left blank.
      style: form
      explode: false

    credential_ids:
      schema:
        type: array
        items:
          type: string
      in: query
      name: credential_id
      description: Comma-separated list of unique credential ids according to the requested types.
      style: form
      explode: false

    # ===== Places ===== #

    place_types:
      schema:
        type: array
        items:
          $ref: "#/components/schemas/HierarchyElementTypeEnum"
      name: type
      in: query
      description: Comma-separated list of place types to consider. All will be assumed if parameter is not used or left blank.
      style: form
      explode: false

    place_ids:
      schema:
        type: array
        items:
          type: string
      description: Comma-separated list of unique place ids according to the requested types.
      name: place
      in: query
      explode: false
      style: form

    place_name:
      schema:
        type: string
      name: name
      in: query
      description: Name of place hierarchy element (in any of its supported languages)

    structure_type:
      schema:
        type: array
        items:
          $ref: "#/components/schemas/StructureTypeEnum"
      name: structure_type
      in: query
      description: Comma-separated list of types of structure in the hierarchy to consider (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false

    structure_grade:
      schema:
        type: array
        items:
          $ref: "#/components/schemas/StructureGradeEnum"
      name: structure_grade
      in: query
      description: Comma-separated list of Structure grades in the hierarchy to consider (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false

    place_layer:
      schema:
        type: integer
      name: layer
      in: query
      description: Most detailed (lower-level) layer of data desired. 0 (zero) being the first level (and higher numbers correspond to lower-levels of information). If left empty, the entire place hierarchy that matches the remaining parameters will be returned.

    places_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - rightSpecifications
            - occupancy
            - areaLocation
            - pointLocation
            - contacts
            - operatingRestrictions
            - characteristics
            - paymentMethods
            - openingTimes
            - streetAddress
      description: Comma-separated list of optional object attributes associated to a place hierarchy element that should be included in the result set.
      name: expand
      in: query
      style: form
      explode: false

    # ===== Right Specifications =====#

    right_spec_types:
      schema:
        type: array
        items:
          $ref: "#/components/schemas/RightSpecificationTypeEnum"
      name: right_type
      in: query
      description: Comma-separated list of right specification types to consider. All will be assumed if parameter is not used or left blank.
      style: form
      explode: false

    right_spec_ids:
      schema:
        type: array
        items:
          type: string
      description: Comma-separated list of unique right specification ids according to the requested types.
      name: right_spec
      in: query
      explode: false
      style: form

    right_specs_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - rateEligibility
            - validity
            - credentials
            - rightPools
      description: Comma-separated list of optional object attributes associated to a right specification that should be included in the result set.
      name: expand
      in: query
      style: form
      explode: false

    # ===== Rates ===== #

    rates_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - rateLineCollections
            - rateLineCollections.rateLines
      description: Comma-separated list of optional attributes associated to a rate that should be included in the result set.
      name: expand
      in: query
      style: form
      explode: false

    # ===== Sessions ===== #

    sessions_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - credentials
            - vehicleAncillaryIdentification
            - segments
            - segments.space
            - segments.assignedRight
      description: Comma-separated list of optional attributes associated to a session or its segment.s that should be included in the result set.
      name: expand
      in: query
      style: form
      explode: false

    # ===== AssignedRights ===== #

    assigned_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - plannedUses
            - assignedRightIssuer
      description: Comma-separated list of optional object attributes associated to an assigned right that should be included in the result set.
      name: expand
      in: query
      style: form
      explode: false

  schemas:

    #=== API ===#

    ResponseStatusEnum:
      title: ResponseStatusEnum
      description: |-
        Type of status for a Response.
        * ok : OK
        * error : An error occurred
      type: string
      x-package: api.enums
      enum:
        - ok
        - error

    DeletedReference:
      title: DeletedReference
      description: A reference to a deleted identifiable managed object where the identifier is unique.
        It is described by a string identifying the class of the referenced object (key name) with a unique string
        identifier as its value, and the deletion instant.
      type: object
      x-package: api
      properties:
        id:
          type: string
          description: The unique id of the deleted object.
        className:
          type: string
          description: The class name of the deleted object.
          pattern: '^([A-Z][a-z0-9]+)+'
        deleteTimestamp:
          description: The instant when the reference was deleted.
          $ref: '#/components/schemas/DateTime'
      required:
        - id
        - className
        - deleteTimestamp

    PaginatedList:
      title: PaginatedList
      description: Paginated list of results for listing API endpoints.
      type: object
      x-package: api
      properties:
        meta:
          $ref: "#/components/schemas/PaginatedListMeta"
        deletedReferences:
          type: array
          description: This attribute will returned when the `modified_since` query parameter is used.
            It will contain references to deleted resources since the provided instant, that would have otherwise been
            included in the dataset (either at the top-level or as associated objects).
          items:
            $ref: "#/components/schemas/DeletedReference"
      required:
        - meta

    PaginatedListMeta:
      title: PaginatedListMeta
      description: Metadata for paginated list of results for listing API endpoints.
      type: object
      x-package: api
      properties:
        referenceInstant:
          type: integer
          description: Unix epoch time to be used as reference which should be the same for all pages. Allows a consistent view of data across multiple paged requests.
          minimum: 0
          examples: [1709840615]
        offset:
          type: integer
          minimum: 0
          description: Index of the first item returned in the page.
          examples: [0]
        pageSize:
          type: integer
          description: Maximum number of items that can be returned per page.
          minimum: 0
          examples: [100]
        total:
          type: integer
          description: Total number of items contained in all pages.
          minimum: 0
          examples: [1]
      required:
        - referenceInstant
        - offset
        - pageSize
        - total

    ResponseStatus:
      title: ResponseStatus
      description: Codifies responses following some creation, update or delete operation.
      type: object
      x-package: api
      properties:
        status:
          description: The status code of the response.
          $ref: "#/components/schemas/ResponseStatusEnum"
        code:
          type: integer
          description: Same numbering and semantics as HTTP status codes.
        message:
          type: string
          description: Descriptive message for error statuses.
      required:
        - status

    ResponseStatusWithId:
      title: ResponseStatusWithId
      description: Response to successful creation operation which returns a generated ID.
      type: object
      x-package: api
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the event subscription
          required:
            - id
        - $ref: '#/components/schemas/ResponseStatus'

    #=== Common ===#

    ComparisonOperatorEnum:
      title: ComparisonOperatorEnum
      description: |-
        Logical comparison operations
        * equalTo : Logical comparison operator of "equal to".
        * greaterThan : Logical comparison operator of "greater than".
        * greaterThanOrEqualTo : Logical comparison operator of "greater than or equal to".
        * lessThan : Logical comparison operator of "less than".
        * lessThanOrEqualTo : Logical comparison operator of "less than or equal to".
      type: string
      x-package: common.enums
      enum:
        - equalTo
        - greaterThan
        - greaterThanOrEqualTo
        - lessThan
        - lessThanOrEqualTo

    CountryCode:
      title: CountryCode
      description: EN ISO 3166-1 two-character country code.
      type: string
      x-package: common
      pattern: "^[a-z]{2}$"
      examples: [en]

    CurrencyCode:
      title: CurrencyCode
      description: Code for the specified currency as defined in ISO 4217.
      type: string
      x-package: common
      pattern: "^[A-Z]{3}$"
      examples: [GBP,EUR]

    DateTime:
      title: DateTime
      description: ISO-8601 format definition of a date and time - format YYYY-MM-DDTHH:MM:SSZ.
      type: string
      x-package: common
      format: date-time
      examples: ["2024-03-09T15:35:08Z"]

    Duration:
      title: Duration
      description: ISO8601 format definition of an interval of time in format [PnnYnnMnnDTnnHnnMnnS].
      type: string
      x-package: common
      pattern: "^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?$"
      examples: ["P1Y2M3DT4H5M6S"]

    EMail:
      title: EMail
      description: Represents an eMail address.
      type: string
      x-package: common
      format: email
      examples: ["john.doe@npp.com"]

    LanguageCode:
      title: LanguageCode
      description: ISO 639-1:2002 language code.
      type: string
      x-package: common
      pattern: "^[a-z]{2}$"
      examples: ["en"]

    Time:
      title: Time
      description: ISO-8601 format definition of a time - format HH:MM.
      type: string
      x-package: common
      pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
      examples: ["12:15"]

    Url:
      title: Url
      description: Represents a Url for an internet accessible resource.
      type: string
      x-package: common
      examples: ["https://api.npp.org.uk"]

    MultilingualString:
      title: MultilingualString
      description: Array of SpecificLanguageString objects representing multi language text.
      type: array
      minItems: 1
      x-package: common
      items:
        $ref: "#/components/schemas/SpecificLanguageString"

    SpecificLanguageString:
      title: SpecificLanguageString
      description: Object containing a language code (using ISO 639-1:2002) and the translated string.
      type: object
      x-package: common
      properties:
        language:
          $ref: "#/components/schemas/LanguageCode"
        string:
          type: string
          description: Translated string
          examples: ["This is a translated string"]
      required:
        - language
        - string

    Reference:
      title: Reference
      description: Represents a reference to an identifiable object where the identifier is unique.
        It is composed of an unique identifier and a string identifying the class of the referenced object.
        If multiple versions exists for the object, the latest version is considered.
      type: object
      x-package: common
      minProperties: 1
      maxProperties: 1
      properties:
        id:
          type: string
          description: The unique identifier within the given class.
          examples: ["98bccb9c-2ffe-4ca4-8e7f-eb1ae4439c29"]
        className:
          type: string
          description: The class name of the referenced object in PascalCase.
          minLength: 1
          examples: ["UKNumberPlate"]
      required:
        - id
        - className

    ReferencedCodeListEntry:
      title: ReferencedCodeListEntry
      description: Provides a structure to support reference to an entry in a previously defined user-defined code list.
      type: object
      x-package: common
      properties:
        codeListEntryId:
          $ref: '#/components/schemas/Reference'
        codeListId:
          $ref: '#/components/schemas/VersionedReference'
        entryDefinedValue:
          type: string
          description: Free-text defined text (name) for the code list entry being referenced.
      required:
        - entryDefinedValue

    RGBColour:
      title: RGBColour
      description: A RGB colour described by values for red, green and blue (0..255) as well as an optional name.
      type: object
      x-package: common
      properties:
        colourName:
          $ref: '#/components/schemas/MultilingualString'
        rgbBlueValue:
          type: integer
          description: The blue value of the RGB colour (0..255).
          minimum: 0
          maximum: 255
        rgbGreenValue:
          type: integer
          description: The green value of the RGB colour (0..255).
          minimum: 0
          maximum: 255
        rgbRedValue:
          type: integer
          description: The red value of the RGB colour (0..255).
          minimum: 0
          maximum: 255
      required:
        - rgbBlueValue
        - rgbGreenValue
        - rgbRedValue

    VehicleAncillaryIdentification:
      title: VehicleAncillaryIdentification
      description: Information relating to a specific vehicle.
      type: object
      x-package: common
      properties:
        country:
          $ref: '#/components/schemas/CountryCode'
        color:
          type: string
          description: The predominant colour of the vehicle.
        description:
          type: string
          description: Free-text description of other distinguishing features of the vehicle.
        make:
          type: string
          description: The branded manufacturer's name for the vehicle (e.g. Ford, Audi, BMW, Mazda).
        model:
          type: string
          description: The model name for the vehicle type (e.g. Ford Mondeo, Citroen C-Zero).
        stateProvince:
          type: string
          description: State, province or other administrative subdivision where a nation state permits registration of vehicles on a lower administrative level basis.
      required:
        - country

    VersionedIdentity:
      title: VersionedIdentity
      description: Represents an object unique identifier associated with a version that can evolve over time.
      type: object
      x-package: common
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          minLength: 1
          examples: ["98bccb9c-2ffe-4ca4-8e7f-eb1ae4439c29"]
        version:
          type: integer
          description: Positive integer representing the object version.
          minimum: 1
          examples: [1]
      required:
        - id
        - version

    VersionedReference:
      title: VersionedReference
      description: Represents a reference to an identifiable object where the combination of the identifier and version is unique.
        It is composed of an unique identifier, a version and potentially a string identifying the class of the referenced object.
      type: object
      x-package: common
      properties:
        id:
          type: string
          description: Unique identifier for the object.
          minLength: 1
          examples: ["98bccb9c-2ffe-4ca4-8e7f-eb1ae4439c29"]
        version:
          type: integer
          description: Positive integer representing the object version.
          minimum: 1
          examples: [1]
        className:
          type: string
          description: Class name of the referenced object.
          pattern: "^[A-Z]+[A-Za-z0-9]+"
          examples: ["UKNumberPlate"]
      required:
        - id
        - version

    #=== Common - GeoJSON ===#

    GeoJsonGeometryTypeEnum:
      title: GeoJsonGeometryTypeEnum
      description: GeoJson geometry type
      type: string
      x-package: common.geojson.enums
      enum:
        - Point
        - LineString
        - MultiPolygon

    GeoJsonGeometry:
      title: GeoJsonGeometry
      description: GeoJson geometry object
      type: object
      x-package: common.geojson
      discriminator:
        propertyName: type
        mapping:
          Point: '#/components/schemas/GeoJsonPoint'
          LineString: '#/components/schemas/GeoJsonLineString'
          MultiPolygon: '#/components/schemas/GeoJsonMultiPolygon'
      properties:
        type:
          $ref: '#/components/schemas/GeoJsonGeometryTypeEnum'
      required:
        - type

    GeoJsonPoint:
      title: GeoJsonPoint
      description: GeoJson Point
      type: object
      x-package: common.geojson
      allOf:
        - $ref: '#/components/schemas/GeoJsonGeometry'
        - type: object
          properties:
            coordinates:
              $ref: '#/components/schemas/GeoJson2DPoint'

    GeoJsonLineString:
      title: GeoJsonLineString
      description: GeoJson Line String
      type: object
      x-package: common.geojson
      allOf:
        - $ref: '#/components/schemas/GeoJsonGeometry'
        - type: object
          properties:
            coordinates:
              type: array
              minItems: 2
              items:
                $ref: '#/components/schemas/GeoJson2DPoint'

    GeoJsonMultiPolygon:
      title: GeoJsonMultiPolygon
      description: GeoJson MultiPolygon
      type: object
      x-package: common.geojson
      allOf:
        - $ref: '#/components/schemas/GeoJsonGeometry'
        - type: object
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/GeoJson2DPoint'

    GeoJson2DPoint:
      title: GeoJson2DPoint
      description: GeoJson 2D Point
      type: array
      x-package: common.geojson
      maxItems: 2
      minItems: 2
      items:
        type: number

    PointLocation:
      title: PointLocation
      description: Represents a single geospatial point using GeoJSON.
      type: object
      x-package: common.geojson
      $ref: '#/components/schemas/GeoJsonPoint'

    AreaLocation:
      title: AreaLocation
      description: Represents a geographic or geometric defined area using GeoJSON
      type: object
      x-package: common.geojson
      $ref: '#/components/schemas/GeoJsonMultiPolygon'

    #=== Common - Units ===#

    Units:
      title: Units
      description: Amount in units, which are specified by unitTypeEnum.
      type: number
      x-package: common.units

    Ampere:
      title: Ampere
      description: Unit for electric current.
      type: number
      x-package: common.units

    Volt:
      title: Volt
      description: Unit of measure of electric potential.
      type: number
      x-package: common.units

    Watt:
      title: Watt
      description: Unit of measure of electric power.
      type: number
      x-package: common.unit

    #=== Contact & Organisation ===#

    ContactPointTypeEnum:
      title: ContactPointTypeEnum
      description: |-
        Defines the supported lists of types of contact.
        * customerService : Contact details for parking customer support for a facility or specific entity
        * emergencyContact : Contact details for emergency assistance or support for a facility or specific entity specifically related to parking operations
        * operator : Contact details for the parking operator for a facility or specific entity
        * owner : Contact details for the owner of a facility or specific entity.
        * propertyManager : Contact details for the property manager of a facility or related facility.
        * securityService : Contact details for security services for a facility or specific entity
      type: string
      x-package: contact.enums
      enum:
        - customerService
        - emergencyContact
        - operator
        - owner
        - propertyManager
        - securityService

    ContactTypeEnum:
      title: ContactTypeEnum
      description: |-
        Defined the type of contact object.
        * ContactPoint: Contact detailed information.
        * ContactByReference: Reference to an exiting contact.
      type: string
      x-package: contact.enums
      enum:
        - contactPoint
        - contactByReference

    EmailTypeEnum:
      title: EmailTypeEnum
      description: |-
        Defines the supported lists of different email contact types
        * customerService: The email contact is for customer service.
        * general: The email contact is general in nature.
        * helpdesk: The email contact is a helpdesk.
        * individual: The email contact is for a specified individual.
      type: string
      x-package: contact.enums
      enum:
        - customerService
        - general
        - helpdesk
        - individual

    Contact:
      title: Contact
      description: Address and contact information about some person, service or the parking site, provided in detail or via reference.
      type: object
      x-package: contact
      discriminator:
        propertyName: contactType
        mapping:
          contactPoint: '#/components/schemas/ContactPoint'
          contactByReference: '#/components/schemas/ContactByReference'
      properties:
        contactType:
          $ref: '#/components/schemas/ContactTypeEnum'
        contactNotDefined:
          type: boolean
          description: When true, there is currently no contact defined for the selected role and/or timeframe.
            Don't use the specialisations in this case.
        contactUnknown:
          type: boolean
          description: When true, the contact for the selected role and/or timeframe is unknown.
            Don't use the specialisations in this case.
        shareWithPublic:
          type: boolean
          description: When true, the details of this contact may be shared with the public.
            If false these contacts details are for internal purposes only.
        validityOfContact:
          $ref: '#/components/schemas/OverallPeriod'
      required:
        - contactType

    ContactDetails:
      title: ContactDetails
      description: Details for some person, service or the parking site itself, especially address information.
      type: object
      x-package: contact
      properties:
        available24hours:
          type: boolean
          description: Specifies if the availability is 24 hours a day. If true available 24 hours.
            If omitted, this information is unknown or heterogeneous.
        contactDetailsFax:
          type: string
          description: Fax of the contact.
        contactDetailsLanguage:
          type: array
          description: Language(s) this contact is able to speak resp. understand.
          items:
            $ref: '#/components/schemas/LanguageCode'
        contactDetailsLogoUrl:
          $ref: '#/components/schemas/Url'
        contactDetailsMoreInfo:
          $ref: '#/components/schemas/MultilingualString'
        contactDetailsResponsibility:
          $ref: '#/components/schemas/MultilingualString'
        contactPersonFirstName:
          type: string
          description: First name of the contact person.
        contactPersonName:
          type: string
          description: Name of the contact person.
        contactPersonPosition:
          $ref: '#/components/schemas/MultilingualString'
        publishingAgreement:
          type: boolean
          description: Indication, whether the contact accepted publishing its contact information [TRUE] = accepted.
        urlLinkAddress:
          $ref: '#/components/schemas/Url'

    ContactPoint:
      title: ContactPoint
      description: Defines contact details for specified role.
        Organisation name attribute should not be used in combination with role parkingSiteAddress.
      type: object
      x-package: contact
      allOf:
        - $ref: '#/components/schemas/Contact'
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            organisationName:
              $ref: '#/components/schemas/MultilingualString'
            type:
              $ref: '#/components/schemas/ContactPointTypeEnum'
            address:
              type: array
              description: Addresses.
              items:
                $ref: '#/components/schemas/Address'
            contactDetails:
              type: array
              description: Contact details.
              items:
                $ref: '#/components/schemas/ContactDetails'
            eMailCommonData:
              type: array
              description: Email common data.
              items:
                $ref: '#/components/schemas/EMailCommonData'
            telephoneContacts:
              type: array
              description: Telephone contact.
              items:
                $ref: '#/components/schemas/TelephoneContact'
            pointLocations:
              type: array
              description: Contact point location.
              items:
                $ref: '#/components/schemas/PointLocation'
          required:
            - type

    ContactByReference:
      title: ContactByReference
      description: Contact information that is addressed via a reference.
      type: object
      x-package: contact
      allOf:
        - $ref: '#/components/schemas/Contact'
        - type: object
          properties:
            contactReference:
              $ref: '#/components/schemas/VersionedReference'
          required:
            - contactReference

    EMailCommonData:
      title: EMailCommonData
      description: Defines information concerning an email point of contact.
      type: object
      x-package: contact
      properties:
        primaryFlag:
          description:  If true, this indicates that this is the primary point of contact
          type: boolean
        typeCode:
          description: The type of contact that can be reached with this email
          $ref: '#/components/schemas/EmailTypeEnum'
        email:
          description: The email address
          $ref : '#/components/schemas/EMail'

    ImageAlbum:
      title: ImageAlbum
      description: A class defining information relating to images for a parking facility.
      type: object
      x-package: contact
      properties:
        photo:
          $ref: '#/components/schemas/Url'
        caption:
          $ref: '#/components/schemas/MultilingualString'
        logoImage:
          type: array
          description: URL to location of logo(s) the parking operator wishes to associate with this parking facility (e.g. their logo, schemes [ParkMark])
          items:
            $ref: '#/components/schemas/Url'

    Marketing:
      title: Marketing
      description: Universal resource locator (URI) that points towards a web site carrying marketing material supplied.
      type: object
      x-package: contact
      properties:
        imageAlbums:
          type: array
          description: Image albums associated
          items:
            $ref: '#/components/schemas/ImageAlbum'
        webURLs:
          type: array
          items:
            $ref: '#/components/schemas/Url'

    TelephoneContact:
      title: TelephoneContact
      description: A class defining information relating to a specific telephone point of contact.
      type: object
      x-package: contact
      properties:
        areaCode:
          type: string
          description: The area code element of a telephone number.
        extensionNumbers:
          type: array
          description: Any extension number typically within a larger organisation's telephone exchange system.
          items:
            type: string
        ituCountryCode:
          type: string
          description: Country calling codes or country dial in codes are telephone dialing prefixes for the member countries or
            regions of the International Telecommunication Union (ITU).
            They are defined by the ITU-T in standards E.123 and E.164.
        localNumbers:
          type: array
          description: The local code element of a telephone number.
          items:
            type: string

    #=== Places ===#

    ElementDescriptorEnum:
      title: ElementDescriptorEnum
      description: |-
        A list of the supported parking element descriptors (e.g. floor, row).
        * floorOrLevel: Describes a place identified as a "floor", with typical use to describe a floor or level in a multi-level structure
        * row: Describes a place identified as a "row", with typical use to describe a quasi-line parking or other feature of common characteristics
        * street: Describes a place identified as a "street", with typical use to describe a part of a road sharing a common given name.
      type: string
      x-package: place.enums
      enum:
        - floorOrLevel
        - row
        - street

    HierarchyElementTypeEnum:
      title: HierarchyElementTypeEnum
      description: |-
        Defines the supported lists of types of parking hierarchy elements permissible
        * campus : a data structure holding information about a large, often ill-defined area, which may contain many parking structures.
        * identifiedArea : a data structure holding information about a coherent feature, such as a set of parking spaces that all share the same characteristics.
        * parkingPlace : a data structure holding information about a single identifiable parking place.
        * space : a data structure holding information about a single space for parking, usually designed for one vehicle, which may be denoted by painted or other road surface markers.
        * subplaceElement : a sub-division of a place for the convenience of the operator that may be used for parking related or other purposes.
        * specificArea : a specialisation of an identified area that denotes a specific geographic area in a place that has a common physical infrastructure purpose and common characteristics.
        * vehicularAccess : a specialisation of an identified area defining vehicular access areas.
        * electricChargingEquipment : a specialisation of a supplemental facility for electric charging areas.
        * supplementalEquipment : a specialisation of a supplemental facility which is available on some site, for example on a rest area.
        * supplementalServiceFacility : a specialisation of a supplemental facility to specify the type and number of available sub-facilities, for example 20 restaurants.
      type: string
      x-package: place.enums
      enum:
        - campus
        - identifiedArea
        - parkingPlace
        - space
        - subplaceElement
        #- specificArea
        #- vehicularAccess
        #- electricChargingEquipment
        #- supplementalEquipment
        #- supplementalServiceFacility

    RoadTypeEnum:
      title: RoadTypeEnum
      description: |-
        Categorisation of the  road type (motorway,main road,...).
        * mainRoad : Main road.
        * motorway : Motorway.
        * other : Other.
        * trunkRoad : Trunk road.
      type: string
      x-package: place.enums
      enum:
        - mainRoad
        - motorway
        - other
        - trunkRoad

    ServiceFacilityTypeEnum:
      title: ServiceFacilityTypeEnum
      description: |
        A service facility. In distinction to equipment, a service is usually manned.
        * bikeGarage: A place where bikes are repaired.
        * bikeSharing: Bike Sharing.
        * cafe: Cafe.
        * carWash: Car wash.
        * docstop: The site is part of the Docstop project, https://www.docstoponline.eu, which means medical assistance for professional drivers.
        * foodShopping: Food shopping.
        * hotel: A hotel.
        * kiosk: Kiosk.
        * laundry: A possibility for washing clothes (might also be a laundromat with coins).
        * leisureActivities: There are leisure activities offered on the site or in the very near surrounding. Use the additional description attribute to give details.
        * medicalFacility: Medical facility.
        * motel: Hotel located aside a motorway.
        * motorcycleGarage: A place where motorcycles are repaired.
        * motorwayRestaurant: Restaurant located on a motorway rest area.
        * motorwayRestaurantSmall: Smaller type of restaurant located on a motorway rest area. Might be with limited offers.
        * other: Some other service facility. Use 'otherEquipmentOrServiceFacility' to specify it.
        * overnightAccommodation: An accommodation to stay overnight.
        * payDesk: A manned possibility to pay.
        * petrolStation: Indicates whether it is possible to get petrol.
        * pharmacy: Pharmacy.
        * police: Indicates whether a police station is on site or very close.
        * restaurant: Restaurant.
        * restaurantSelfService: A restaurant where people arrange and fetch their meal themselves, this might enclose a buffet.
        * shop: A shop of unspecified kind.
        * snackBar: A snack bar.
        * sparePartsShopping: Spare parts shopping.
        * touristInformation: Tourist information with employees.
        * truckRepair: Truck repair.
        * truckWash: Truck wash.
        * tyreRepair: A tyre repair service.
        * unknown: Unknown.
        * vehicleMaintenance: Garage repair service.
      type: string
      x-package: place.enums
      enum:
        - bikeGarage
        - bikeSharing
        - cafe
        - carWash
        - docstop
        - foodShopping
        - hotel
        - kiosk
        - laundry
        - leisureActivities
        - medicalFacility
        - motel
        - motorcycleGarage
        - motorwayRestaurant
        - motorwayRestaurantSmall
        - other
        - overnightAccommodation
        - payDesk
        - petrolStation
        - pharmacy
        - police
        - restaurant
        - restaurantSelfService
        - shop
        - snackBar
        - sparePartsShopping
        - touristInformation
        - truckRepair
        - truckWash
        - tyreRepair
        - unknown
        - vehicleMaintenance

    StructureGradeEnum:
      title: StructureGradeEnum
      description: |-
        Types of layout of the parking site.
        * aboveGround : Parking is above ground level (this may include ground level parking)
        * groundLevel : Parking is at ground level
        * underground : Parking is on one or more floors below ground level
      type: string
      x-package: place.enums
      enum:
        - aboveGround
        - groundLevel
        - underground

    StructureTypeEnum:
      title: StructureTypeEnum
      description: |-
        A list of types of parking structure.
        * offStreetStructure : Off-street multi-tier parking structure.
        * offStreetSurface : Off-street ground-level at grade parking.
        * onStreet : On-street parking.
      type: string
      x-package: place.enums
      enum:
        - offStreetStructure
        - offStreetSurface
        - onStreet

    UnitOfMeasureDistanceEnum:
      title: UnitOfMeasureDistanceEnum
      description: |-
        Unit used for length/distance elements.
        * foot: Imperial foot = 12 inches
        * metres: SI - metre
      type: string
      x-package: place.enums
      enum:
        - foot
        - metres

    UnitOfMeasureAreaEnum:
      title: UnitOfMeasureAreaEnum
      description: |-
        Unit used for area/surface elements.
        * squareFeet: Unit of Square feet.
        * squareMetres: Unit of Metres Square.
        * squareYards: Unit of Square yards.
      type: string
      x-package: place.enums
      enum:
        - squareFeet
        - squareMetres
        - squareYards

    UnitOfMeasureWeightEnum:
      title: UnitOfMeasureWeightEnum
      description: |-
        Unit used for weight elements.
        * poundsWeight: 1 lb
        * tonnesMetric: 1000 kilogrammes
      type: string
      x-package: place.enums
      enum:
        - poundsWeight
        - tonnesMetric

    UserTypeEnum:
      title: UserTypeEnum
      description: |-
        Types of different users,for example used in the context of parking.
        * allUsers: All users.
        * commuters: Commuters.
        * customers: Customers.
        * disabled: Physically impaired people.
        * elderlyUsers: Elderly users.
        * employees: Employees.
        * families: Families.
        * handicapped: Persons with deficiencies in their daily life.
        * hearingImpaired: People with difficulties to hear.
        * hotelGuests: Hotel guests.
        * longTermParkers: Long-term parker.
        * members: Members.
        * men: Men.
        * other: Other.
        * overnightParkers: Overnight parker.
        * parkAndCycleUser: Park and cycle user.
        * parkAndRideUsers: Users that are exchanging into public transport at a park and ride station.
        * parkAndWalkUser: Park and walk user.
        * pensioners: Pensioners.
        * pregnantWomen: Pregnant women.
        * registeredDisabledUsers: Registered disabled persons.
        * reservationHolders: Those who have a valid reservation, e.g. for the duration of parking.
        * residents: Local residents.
        * seasonTicketHolders: Season ticket holders.
        * shoppers: Shoppers.
        * shortTermParkers: Short-term parker.
        * sportEventAwaySupporters: Sport event away supporters.
        * sportEventHomeSupporters: Sport event home supporters.
        * staff: Staff.
        * students: Students.
        * subscribers: Subscribers.
        * unknown: Unknown.
        * visitors: Visitors.
        * visuallyImpaired: People with difficulties to see.
        * wheelchairUsers: Wheelchair users.
        * women: Women.
      type: string
      x-package: place.enums
      enum:
        - allUsers
        - commuters
        - customers
        - disabled
        - elderlyUsers
        - employees
        - families
        - handicapped
        - hearingImpaired
        - hotelGuests
        - longTermParkers
        - members
        - men
        - other
        - overnightParkers
        - parkAndCycleUser
        - parkAndRideUsers
        - parkAndWalkUser
        - pensioners
        - pregnantWomen
        - registeredDisabledUsers
        - reservationHolders
        - residents
        - seasonTicketHolders
        - shoppers
        - shortTermParkers
        - sportEventAwaySupporters
        - sportEventHomeSupporters
        - staff
        - students
        - subscribers
        - unknown
        - visitors
        - visuallyImpaired
        - wheelchairUsers
        - women

    AccessLaneSpecific:
      title: AccessLaneSpecific
      description: |-
        A specialisation of an identifiedArea defining VehicularAccess areas. 
        Defines the sequence and nature of a specific entrance or exit lane.
      type: object
      x-package: place
      properties:
        laneType:
          $ref: '#/components/schemas/AccessLaneTypeEnum'
        sequenceNumber:
          type: integer
          description: |-
            Defines a unique sequence number for this specific lane within the identifiedArea.
            No specific method of numbering is defined. 
            Preferred practice numbers lanes from right to left as seen in-bound into the parking facility.
          minimum: 0
        entranceOpenTimeLaneSpecific:
          $ref: '#/components/schemas/EntranceOpenTime'
        exitOpenTimeLaneSpecific:
          $ref: '#/components/schemas/ExitOpenTime'
        maxDimForSpecificLane:
          $ref: '#/components/schemas/MaximumDimensions'
      required:
        - laneType
        - sequenceNumber

    ElectricChargingEquipment:
      title: ElectricChargingEquipment
      description: A specialisation to the SupplementalFacility class adding an ElectricChargingPoint.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/SupplementalFacility'
        - type: object
          properties:
            electricChargingPoint:
              $ref: '#/components/schemas/ElectricChargingPoint'
          required:
            - electricChargingPoint

    HierarchyElement:
      title: HierarchyElement
      description: A generalised component of a place hierarchy, that forms one element in the tree-like hierarchy.
        This forms a reusable block of the hierarchy, with relations to its parent element (if one exists) and any child elements.
        Each Place element in the hierarchy shall have a name, and may support a free-text description and an operator/property owner defined reference (e.g. location number/identifier)'
      type: object
      x-package: place
      discriminator:
        propertyName: type
        mapping:
          campus: '#/components/schemas/Campus'
          parkingPlace: '#/components/schemas/Place'
          space: '#/components/schemas/Space'
          #subplaceElement: '#/components/schemas/SubPlace'
          #identifiedArea: '#/components/schemas/IdentifiedArea'
          #specificArea: '#/components/schemas/SpecificArea'
          #vehicularAccess: '#/components/schemas/VehicularAccess'
          #electricChargingEquipment: '#/components/schemas/ElectricChargingEquipment'
          #supplementalEquipment: '#/components/schemas/SupplementalEquipment'
          #supplementalServiceFacility: '#/components/schemas/SupplementalServiceFacility'
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/HierarchyElementTypeEnum'
            name:
              $ref: '#/components/schemas/MultilingualString'
            description:
              $ref: '#/components/schemas/MultilingualString'
            aliases:
              type: array
              description: Alternative names for the hierarchy element.
              items:
                $ref: '#/components/schemas/MultilingualString'
            operatorDefinedReference:
              $ref: '#/components/schemas/MultilingualString'
            parentId:
              $ref: '#/components/schemas/VersionedReference'
            childIds:
              type: array
              readOnly: true
              description: The identity of one or several child nodes directly related to this hierarchy element.
              items:
                $ref: '#/components/schemas/VersionedReference'
            layer:
              type: integer
              minimum: 0
              description: Indicator of the position of this hierarchy element in the specific hierarchy, with the top of the hierarchy numbered layer 0.
            rightSpecifications:
              type: array
              readOnly: true
              description: RightSpecifications associated to the element
              items:
                $ref: '#/components/schemas/VersionedReference'
            hierarchyElementRecord:
              readOnly: true
              $ref: '#/components/schemas/HierarchyElementRecord'
            hierarchyElementReference:
              $ref: '#/components/schemas/HierarchyElementReference'
            occupancyLevel:
              $ref: '#/components/schemas/OccupancyLevel'
      required:
        - type
        - name
        - layer
        - hierarchyElementRecord

    HierarchyElementList:
      title: HierarchyElementList
      description: Paginated list of HierarchyElements
      type: object
      x-package: place
      allOf:
        - $ref: "#/components/schemas/PaginatedList"
        - type: object
          properties:
            data:
              type: array
              description: List of HierarchyElements
              items:
                $ref: "#/components/schemas/HierarchyElement"

    HierarchyElementRecord:
      title: HierarchyElementRecord
      description: A collection of information concerning the creation of a hierarchy element
      type: object
      x-package: place
      properties:
        creationTime:
          description: Date/time that this version of the place facility record was created.
          $ref: '#/components/schemas/DateTime'
        creator:
          $ref: '#/components/schemas/VersionedReference'
        creatorEmail:
          $ref: '#/components/schemas/EMail'
      required:
        - creationTime

    HierarchyElementReference:
      title: HierarchyElementReference
      description: A class providing a unique reference identifier for a discrete part of the parking place hierarchy.
        This can indicate a campus, parking place, hierarchy element, identifiable area or space.
      type: object
      x-package: place
      properties:
        elementId:
          $ref: '#/components/schemas/VersionedReference'
        demandTable:
          type: array
          items:
            $ref: '#/components/schemas/DemandTable'
        supply:
          type: array
          items:
            $ref: '#/components/schemas/Supply'
      required:
        - elementId

    Campus:
      title: Campus
      description: The highest level in the hierarchy, it typically defines a large facility (such as a university campus, or an airport),
        or a large geographic zone (such as a city or a town), which may contain numerous Places.
        A Campus combines and encompasses a number of Places that can be logically reported together.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/HierarchyElement'

    Space:
      title: Space
      description: A single space for parking, usually designed for one vehicle, which may, but not necessarily, be denoted by painted or other road surface marker.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/HierarchyElement'
        - type: object
          properties:
            spaceId:
              $ref: '#/components/schemas/Reference'
            detection:
              $ref: '#/components/schemas/ParkingSpaceOccupancyDetectionEnum'
            indicativePointLocation:
              $ref: '#/components/schemas/PointLocation'
            spaceBoundedZone:
              $ref: '#/components/schemas/AreaLocation'
            spaceDimension:
              $ref: '#/components/schemas/SpaceDimension'
            spaceMaximumDims:
              $ref: '#/components/schemas/MaximumDimensions'
            operatingRestrictions:
              type: array
              description: Operating restrictions for space
              items:
                $ref: '#/components/schemas/OperatingRestrictions'
          required:
            - spaceId

    Place:
      title: Place
      description: A place or location used for parking, loading, unloading, standing, or some other mobility or transport related activity.
        Place typically identifies a parking structure, surface lot or on street parking zone
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/HierarchyElement'
        - $ref: '#/components/schemas/PlaceInformation'
        - type: object
          properties:
            timeZone:
              type: string
              description: 'IANA time-zone (see https://www.iana.org/time-zones)'
            placeStreetAddress:
              type: array
              description: Place street address
              items:
                $ref: '#/components/schemas/Address'
            placeBoundedZone:
              type: array
              description: Place bounded zone
              items:
                $ref: '#/components/schemas/AreaLocation'
            indicativePlacePointLocation:
              type: array
              description: Indicative place point location
              items:
                $ref: '#/components/schemas/PointLocation'
          required:
            - timeZone

    SubPlace:
      title: SubPlace
      description: |-
        A sub-division of a Place for the convenience of the operator that may be used for parking related or other purposes. 
        Examples of HierarchyElement include a floor or level, specific street or row of a car parking facility
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/HierarchyElement'
        - $ref: '#/components/schemas/PlaceInformation'
        - type: object
          properties:
            elementType:
              $ref: '#/components/schemas/ElementDescriptorEnum'
            elementStreetAddress:
              type: array
              description: Place street address
              items:
                $ref: '#/components/schemas/Address'
            elementAreaLocation:
              type: array
              description: Place bounded zone
              items:
                $ref: '#/components/schemas/AreaLocation'
            notionalElementLocation:
              type: array
              description: Indicative place point location
              items:
                $ref: '#/components/schemas/PointLocation'

    SupplementalEquipment:
      title: SupplementalEquipment
      description: One type of supplemental equipment, which is available on some site, for example on a rest area.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/SupplementalFacility'
        - type: object
          properties:
            equipmentType:
              $ref: '#/components/schemas/EquipmentTypeEnum'
            refillPoints:
              type: array
              items:
                $ref: '#/components/schemas/RefillPoint'
          required:
            - equipmentType

    SupplementalFacility:
      title: SupplementalFacility
      description: One type of supplemental facility which can be supplemental equipment or a supplemental service facility.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/IdentifiedArea'
        - type: object
          properties:
            accessibilities:
              type: array
              description: Information on accessibility, easements and marking for handicapped people.
              items:
                $ref: '#/components/schemas/AccessibilityTypeEnum'
            additionalDescription:
              $ref: '#/components/schemas/MultilingualString'
            applicableForUsers:
              type: array
              description: Limitation to a set of special users.
              items:
                $ref: '#/components/schemas/UserTypeEnum'
            comment:
              $ref: '#/components/schemas/MultilingualString'
            externalIdentifiers:
              type: array
              description: An external identifier for the supplemental facility, e.g. an inventory number.
                This attribute has an unbounded multiplicity to support identifiers for multiple occurrences of this element.'
              items:
                type: string
            nameOrBrand:
              $ref: '#/components/schemas/MultilingualString'
            otherSupplementalFacility:
              type: array
              items:
                $ref: '#/components/schemas/MultilingualString'
            photoUrl:
              $ref: '#/components/schemas/Url'
            quantity:
              type: integer
              minimum: 0
              description: Number of the supplemental facility (e.g. number of toilets, restaurants, park & ride places, etc.) with respect to given restrictions.
                Dynamic overridable.
            regularlyCleaned:
              type: boolean
              description: Indication, if the supplemental facility is cleaned on a regular basis.
            rightSpecificationIds:
              type: array
              description: List of applicable right specifications
              items:
                $ref: '#/components/schemas/VersionedReference'
            supplementalFacilityIndex:
              type: integer
              description: An index to link this supplemental facility between the static and dynamic publications.
          required:
            - supplementalFacilityIndex

    SupplementalServiceFacility:
      title: SupplementalServiceFacility
      description: |-
        One type of supplemental service facility. 
        You can specify the number of this service facility type (e.g. 5 restaurants) as well as the number of sub-items (e.g. 200 restaurant places).
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/SupplementalFacility'
        - type: object
          properties:
            distanceFromOriginFacility:
              type: integer
              description: |-
                Approximate distance (given in metres) between this supplemental facility and some origin facility to 
                which it is clearly related (typically a larger facility, e.g. a parking site).
              minimum: 0
            numberOfSubItems:
              type: integer
              description: |-
                The quantity of sub items to this service facility type, e.g. the total number of restaurant places or fuel dispensers etc.'
              minimum: 0
            serviceFacilityType:
              $ref: '#/components/schemas/ServiceFacilityTypeEnum'
          required:
            - serviceFacilityType

    IdentifiedArea:
      title: IdentifiedArea
      description: |-
        An identifiable discrete bounded geographic zone that shares common characteristics and that may be used for 
        parking related or other purposes. 
        Identified Areas are segmented into two types : Vehicular Access class and Specific Area class.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/HierarchyElement'
        - type: object
          properties:
            streetAddress:
              type: array
              description: Identified area street address.
              items:
                $ref: '#/components/schemas/Address'
            areaBoundedZone:
              type: array
              description: Identified area bounded zone.
              items:
                $ref: '#/components/schemas/AreaLocation'
            indicativeIdentifiedAreaPointLocation:
              type: array
              description: Indicative identified area point location.
              items:
                $ref: '#/components/schemas/PointLocation'
            times:
              $ref: '#/components/schemas/Times'
            operatingRestrictions:
              type: array
              description: Operating restrictions
              items:
                $ref: '#/components/schemas/OperatingRestrictions'

    Road:
      title: Road
      description: |-
        Identification of a road by its name, identifier, type...
      type: object
      x-package: place
      properties:
        distanceToThisRoad:
          $ref: '#/components/schemas/LinearDimension'
        nameOfRoad:
          $ref: '#/components/schemas/MultilingualString'
        roadDestination:
          type: array
          description: |-
            Name of some city, area, compass direction or other identification the road is leading to (to determine the direction in question).
          items:
            $ref: '#/components/schemas/MultilingualString'
        roadIdentifier:
          $ref: '#/components/schemas/MultilingualString'
        roadOrigination:
          type: array
          description: |-
            Name of some city, area, compass direction or other identification this road comes from.
          items:
            $ref: '#/components/schemas/MultilingualString'
        typeOfRoad:
          $ref: '#/components/schemas/RoadTypeEnum'

    RoadNode:
      title: RoadNode
      description: |-
        A road node as part of the specialised road identified by the name of a junction on this road.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/Road'
        - type: object
          properties:
            junctionName:
              $ref: '#/components/schemas/MultilingualString'
          required:
            - junctionName

    SpecificArea:
      title: SpecificArea
      description: Specific Area class is a type of Identified Area data element that denotes a specific geographic area in a Place that has a common physical infrastructure purpose and common characteristics.
        Examples of common infrastructure purpose include parking area, electric charging infrastructure, bike storage. The Specific Area class describes the physical components of a Place.
        Specific Area type Identified Area is used to assign Rights.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/IdentifiedArea'
        - type: object
          properties:
            characteristics:
              $ref: '#/components/schemas/PlaceCharacteristics'

    VehicularAccess:
      title: VehicularAccess
      description: A specialisation of an identifiedArea defining a VehicularAccess areas. This model only supports the modelling of vehicular accesses at the present time.
        Other forms of access (e.g. pedestrian access, rental vehicle return, bicycle access, etc) may be introduced during a later Release if a stakeholder requirement is identified.
        AccessType enumerations for the Vehicular Access type support the definition of characteristics for access into, from and both to and from a parking facility or part thereof respectively (denoted by the type attribute, using the AccessType enumerations). Each of the AccessLaneType enumerations may support the definition of characteristics for each lane within the specific Identified Area. Preferred practice gives a sequence number to each lane left to right when entering the facility.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/IdentifiedArea'
        - type: object
          properties:
            accessLaneSpecifics:
              type: array
              description: Access lane specific
              items:
                $ref: '#/components/schemas/AccessLaneSpecific'
            accessAndEgress:
              type: array
              description: Access and egress
              items:
                $ref: '#/components/schemas/AccessAndEgress'
            accessType:
              $ref: '#/components/schemas/AccessTypeEnum'
            primaryRoads:
              type: array
              description: Primary road
              items:
                $ref: '#/components/schemas/Road'
          required:
            - accessType

    #=== Place - Characteristics ===#

    AccessibilityTypeEnum:
      title: AccessibilityTypeEnum
      description: |-
        Special forms of accessibility, easements and marking for disabled people.
        * barrierFreeAccessible: Accessible without any steps or other barriers. Does not ensure the same access as disabledAccessible.
        * disabledAccessible: Accessible for disabled people. wheelChairAccessible is a special form of it.
        * disabledEasements: There are special easements for disabled people, like handrails or disabled-friendly furniture.
        * disabledMarkedThere: is a visible mark to support access by disabled people (e.g. a wheelchair symbol).
        * none: No form of special accessibility, i.e. usually not convenient for disabled people, e.g. because of steps or barriers.
        * orientationSystemForBlindPeople: There is some orientation system, which helps blind or visually impaired people. Examples might be some acoustic system or tactile paving.
        * other: Other.
        * unknown: It is unknown, whether there is a special form of accessibility.
        * wheelChairAccessible: Accessible by people in a wheelchair.
      type: string
      x-package: place.characteristics.enums
      enum:
        - barrierFreeAccessible
        - disabledAccessible
        - disabledEasements
        - disabledMarkedThere
        - none
        - orientationSystemForBlindPeople
        - other
        - unknown
        - wheelChairAccessible

    AccessLaneTypeEnum:
      title: AccessLaneTypeEnum
      description: |-
        A list of the supported access lane characteristic types :
        * entryOnly: Entry only Lane used for entry to facility only.
        * exitOnly: Exit only Lane used for exit from facility only.
        * reversibleLane: Reversible lane Lane used for both entry and exit to/from facility, depending on operational conditions.
        * serviceVehicleLane: Service vehicle lane Lane used by parking operator service vehicle, not for public use.
      type: string
      x-package: place.characteristics.enums
      enum:
        - entryOnly
        - exitOnly
        - reversibleLane
        - serviceVehicleLane

    AccessTypeEnum:
      title: AccessTypeEnum
      description: |-
        A list of the supported access area types :
        * entry: a zone or area that is a place for access into a facility
        * exit: a zone or area that is a place for access from a facility
        * reversible: a zone or area that is a place for access to or egress from a facility. Conditions may be changed by operation circumstances, such as time of day.
      type: string
      x-package: place.characteristics.enums
      enum:
        - entry
        - exit
        - reversible

    AddressLineTypeEnum:
      title: AddressLineTypeEnum
      description: |-
        A table of types of address lines
         * apartment: Element indicating a discrete element of a building forming the address
         * building: Element identifying the number or name and type of the edifice or construction relevant for the address [derived from ISO19160-4]
         * districtTerritory: Element specifying the geographic or administrative area of the country for the address [Source: 19160-4]
         * floor: Element indicating the floor or level on which a delivery point is located in a multi-storey building [Source:ISO19160-4]
         * poBox: A postal delivery location identifier, not necessarily a physical location.
         * region: Element indicating the name of the area within or adjacent to the town in which delivery address is.
         * street: Element indicating road or street identifier or name 
         * town: Element indicating the name of the populated place in which a delivery point is located, or near to or via which the delivery point is accessed. [Source: ISO19160-4]
         * unit: An element representing a section of a building or organisation.Free-text description of the condition that leads to a surcharge being applied.
      type: string
      x-package: place.enums
      enum:
        - apartment
        - building
        - districtTerritory
        - floor
        - poBox
        - region
        - street
        - town
        - unit

    CoveredTypeEnum:
      title: CoveredTypeEnum
      description: |-
        Defines the supported lists of different types describing roof coverage of the facility or entity
        * covered: Indicates that the facility or specific entity has a roof to provide protection from direct overhead sun or adverse weather
        * notCovered: Indicates that the facility or specific entity has no roof to provide protection from direct overhead sun or adverse weather
        * partiallyCovered: Indicates that the facility or specific entity has a roof offering partial coverage to provide protection from direct overhead sun or adverse weather
        * topLevelNotCovered: Indicates that in a multi-level facility or specific entity the top level(s) have no roof to provide protection from direct overhead sun or adverse weather
      type: string
      x-package: place.characteristics.enums
      enum:
        - covered
        - notCovered
        - partiallyCovered
        - topLevelNotCovered

    OperatingModeTypeEnum:
      title: OperatingModeTypeEnum
      description: |-
        A list of supported parking operation modes
        * app : App – payment is collected via an app that may also control access to the facility.
        * payAndDisplay : PND – pay and display. Vehicle displays a credential to show it is paid. Typically prepaid and short term.
        * payByPlate : PBP - pay by plate - vehicle registration or license plate is used for recording and enforcement either on street or off street. Payment is collected on a prepaid basis or at the exit.
        * payBySpace : PBS – pay by space. Vehicle makes a payment based on occupying a specific space. Typically prepaid.
        * permit : Similar to PND but for long term parking (e.g. monthly pass, quarterly, semester).
        * ticket : Payment is done with a ticket (e.g. with magnetic strip, barcode). Payment is collected at the exit.
      type: string
      x-package: place.characteristics.enums
      enum:
        - app
        - payAndDisplay
        - payByPlate
        - payBySpace
        - permit
        - ticket

    OperatingRestrictionTypeEnum:
      title: OperatingRestrictionTypeEnum
      description: |-
        Defines operating restrictions to use the of a facility.
        * busOnly : Only buses are permitted.
        * busStop : This is a stopping place of bus pick-up or drop-off; not to be used for parking.
        * carpoolOnly : Only carpool vehicles are permitted.
        * commercialVehicleOnly : Only commercial vehicles are permitted.
        * disabledPersonPermitOnly : Only vehicles of registered disabled person permit holders permitted.
        * electricVehicleOnly : Only electric vehicles permitted.
        * freeParking : No fee for parking
        * governmentVehicleOnly : Only government vehicles permitted.
        * loadingZone : This is a loading zone; not to be used for parking.
        * loadingZoneCommercial : Only government vehicles permitted.
        * media : Only for use by the media
        * noParking : No parking permitted
        * noWaiting : No waiting or parking of vehicles is permitted
        * parkingTimeLimit : Time limited parking.
        * residentialPermitOnly : Only for use by residential permit holders only
        * snow : Snow clearing zone; no parking
        * streetCleaning : Street cleansing zone; no parking
        * taxiOnly : Only taxis are permitted.
        * valetOnly : Only valet service vehicles are permitted.
      type: string
      x-package: place.characteristics.enums
      enum:
        - busOnly
        - busStop
        - carpoolOnly
        - commercialVehicleOnly
        - disabledPersonPermitOnly
        - electricVehicleOnly
        - freeParking
        - governmentVehicleOnly
        - loadingZone
        - loadingZoneCommercial
        - media
        - noParking
        - noWaiting
        - parkingTimeLimit
        - residentialPermitOnly
        - snow
        - streetCleaning
        - taxiOnly
        - valetOnly

    StaffEnum:
      title: StaffEnum
      description: |-
        A list of supported values for staffing characteristics
        * staffed : Normally staffed during operating hours
        * temporary : Staffed on a temporary or part time basis.
        * unstaffed : Not normally staffed during operating hours
      type: string
      x-package: place.characteristics.enums
      enum:
        - staffed
        - temporary
        - unstaffed

    LinearDimension:
      title: LinearDimension
      description: A class defining information concerning a linear measure (distance) with unit.
      type: object
      x-package: place.characteristics
      properties:
        measure:
          type: number
          format: float
          description: 'Quantity in the defined unit of measure.'
        unitOfMeasure:
          $ref: '#/components/schemas/UnitOfMeasureDistanceEnum'
      required:
        - measure
        - unitOfMeasure

    AreaDimension:
      title: AreaDimension
      type: object
      description: A class defining information concerning an area measurement with unit.
      x-package: place.characteristics
      properties:
        measure:
          type: number
          format: float
          description: 'Quantity in the defined unit of measure.'
        unitOfMeasure:
          $ref: '#/components/schemas/UnitOfMeasureAreaEnum'
      required:
        - measure
        - unitOfMeasure

    WeightDimension:
      title: WeightDimension
      description: A class defining information concerning a weight quantity with unit.
      type: object
      x-package: place.characteristics
      properties:
        measure:
          type: number
          description: Quantity in the defined unit of measure.
          format: float
        unitOfMeasure:
          $ref: '#/components/schemas/UnitOfMeasureWeightEnum'
      required:
        - measure
        - unitOfMeasure

    SpaceDimension:
      title: SpaceDimension
      description: |-
        A component that provides dimension information. 
        The product of width and height must not be necessarily be the square footage (e.g. in multi-storey buildings or when some zones are not part of the square footage).
      type: object
      x-package: place.characteristics
      properties:
        dimensionHeight:
          $ref: '#/components/schemas/LinearDimension'
        dimensionLength:
          $ref: '#/components/schemas/LinearDimension'
        dimensionWidth:
          $ref: '#/components/schemas/LinearDimension'
        dimensionUsableArea:
          $ref: '#/components/schemas/AreaDimension'
        weightLimit:
          $ref: '#/components/schemas/WeightDimension'

    MaximumDimensions:
      title: MaximumDimensions
      description: A class defining information relating to the maximum physical dimensions for the defined purpose
      type: object
      x-package: place.characteristics
      properties:
        maximumHeight:
          $ref: '#/components/schemas/LinearDimension'
        maximumLength:
          $ref: '#/components/schemas/LinearDimension'
        maximumWidth:
          $ref: '#/components/schemas/LinearDimension'

    Address:
      title: Address
      description: |-
        A street oriented addressing structure supporting delivery
      type: object
      x-package: place.characteristics
      properties:
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        city:
          $ref: '#/components/schemas/MultilingualString'
        postCode:
          type: string
          description: Postcode or postal code for the address.
        addressLines:
          type: array
          description: Address lines
          items:
            $ref: '#/components/schemas/AddressLine'

    AddressLine:
      title: AddressLine
      description: |-
        A class defining information concerning one line of a postal address.
      type: object
      x-package: place.characteristics
      properties:
        order:
          type: integer
          minimum: 0
          description: The sequence order that the address line element should be displayed in
        text:
          $ref: '#/components/schemas/MultilingualString'
        type:
          $ref: '#/components/schemas/AddressLineTypeEnum'
      required:
        - order
        - text
        - type

    PlaceCharacteristics:
      title: PlaceCharacteristics
      description: Defines information concerning characteristics related to a parking facility.
      type: object
      x-package: place.characteristics
      properties:
        openToPublic:
          description: Identifies if this facility is accessible to public use (TRUE) or private use only (FALSE).
          type: boolean
        accessControlled:
          type: boolean
          description: Indicates facility has physical access control (e.g. barriers, gates) (TRUE) or no access control (FALSE).
        robotic:
          type: boolean
          description: Indicates existence of a robotic parking system (a parking structure where customer leaves vehicle at
            drop off area and robots move the vehicle to parking location within the structure). Default is (FALSE).
        coveredType:
          $ref: '#/components/schemas/CoveredTypeEnum'
        disabledAccess:
          type: boolean
          description: Specifies if there is provision of facilities for disable access (TRUE) or not (FALSE).
        disabledAccessTypes:
          type: array
          description: Defines the type of provision of facilities for disable access available.
          items:
            $ref: '#/components/schemas/AccessibilityTypeEnum'
        operatingModes:
          type: array
          description: Defines the mode of parking operation in use.
          items:
            $ref: '#/components/schemas/OperatingModeTypeEnum'
        spacesNonDedicated:
          type: integer
          description: Number of parking spaces that are not assigned for a particular purpose.
          minimum: 0
        spacesTotal:
          type: integer
          description: Total number of parking spaces
          minimum: 0
        staffed:
          $ref: '#/components/schemas/StaffEnum'
        structureGrade:
          $ref: '#/components/schemas/StructureGradeEnum'
        structureType:
          $ref: '#/components/schemas/StructureTypeEnum'
        evChargingPoints:
          type: integer
          description: Total number of electric vehicle charging points.
          minimum: 0

    PlaceInformation:
      title: PlaceInformation
      description: Defines information concerning multiple features relating to parking hierarchy elements.
      type: object
      x-package: place.characteristics
      properties:
        characteristics:
          type: array
          description: Characteristics for hierarchy element.
          items:
            $ref: '#/components/schemas/PlaceCharacteristics'
        contacts:
          type: array
          description: Contact info for hierarchy element.
          items:
            $ref: '#/components/schemas/Contact'
        marketing:
          $ref: '#/components/schemas/Marketing'
        operatingRestrictions:
          type: array
          description: Operating restrictions for hierarchy element.
          items:
            $ref: '#/components/schemas/OperatingRestrictions'
        rgbColours:
          type: array
          description: Colours associated with hierarchy element.
          items:
            $ref: '#/components/schemas/RGBColour'
        times:
          $ref: '#/components/schemas/Times'
        paymentMethods:
          type: array
          description: Accepted payment methods at hierarchy element.
          items:
            $ref: '#/components/schemas/PaymentMethod'
        safetyStandardClassifications:
          type: array
          description: Safety standard classifications.
          items:
            $ref: '#/components/schemas/SafetyStandardClassification'

    OperatingRestrictions:
      title: OperatingRestrictions
      description: A class defining operating restrictions.
      type: object
      x-package: place.characteristics
      properties:
        operatingRestriction:
          $ref: '#/components/schemas/OperatingRestrictionTypeEnum'
        operatingRestrictionContext:
          $ref: '#/components/schemas/MultilingualString'
      required:
        - operatingRestriction

    SafetyStandardClassification:
      title: SafetyStandardClassification
      description: Use this class to classification type/level for security schemes for a place
      type: object
      x-package: place.characteristics
      properties:
        securityFeature:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
        securityLevel:
          $ref: '#/components/schemas/ReferencedCodeListEntry'

    #=== Place - Occupancy ===#

    CalculationTypeEnum:
      title: CalculationTypeEnum
      description: |-
        A list of the supported calculation types for demand.
        * counted : Physical determination if a space is occupied
        * derived : Space occupancy is estimated by using related data such as active payments or sold permits.
        * expected : Future prediction of occupancy levels.
        * verified : Defines an occupancy report that is considered a verified report.
      type: string
      x-package: place.occupancy.enums
      enum:
        - counted
        - derived
        - expected
        - verified

    ParkingSpaceOccupancyDetectionEnum:
      title: ParkingSpaceOccupancyDetectionEnum
      description: |-
        A list of supported methods for detection of occupancy by a vehicle in a parking space.
        * anpr : Automated License Plate Recognition information is tracked for inbound and outbound traffic. The difference between in and out counts enables an occupancy count.
        * imageAnalytics : Image analytics are used to evaluate a picture with known parking space geography and computer vision is used to determine occupancy at a point in time.
        * spaceSensor : A sensor in each space detects the presence of a vehicle.
        * userDeclaration : User self-declared, where the user enters a space identifier and/or vehicle registration number, typically at the start of a parking session.
        * videoAnalytics : Video analytics are used to evaluate a video stream to identify objects (vehicles) and direction of travel. The difference between the inbound objects and outbound objects determines occupancy.
        * videoSpace : Video analytics or ANPR technologies are used to evaluate a video stream with known space geometry to identify objects (vehicles or license plates) occupying specific spaces.
        * visual : Operator/owner makes periodic visual counts of the facility.
      type: string
      x-package: place.occupancy.enums
      enum:
        - anpr
        - imageAnalytics
        - spaceSensor
        - userDeclaration
        - videoAnalytics
        - videoSpace
        - visual

    SupplyViewTypeEnum:
      title: SupplyViewTypeEnum
      description: |-
        Define if space quantity is demarcated or estimated.
        * spaceView : Each space is physically marked and identifiable.
        * vehicleView :  The vehicle capacity in an area is estimated based on calculating a capacity (i.e. curb length divided by a length of vehicle). The
        distributing party decides on the appropriate length of vehicle to use.
      type: string
      x-package: place.occupancy.enums
      enum:
        - spaceView
        - vehicleView

    DemandTable:
      title: DemandTable
      description: Defines the parameters of reporting actual usage of parking in a Hierarchy Element
      type: object
      x-package: place.occupancy
      properties:
        frequency:
          $ref: '#/components/schemas/Duration'
        timestamp:
          description: Timestamp when the demand table data was compiled.
          $ref: '#/components/schemas/DateTime'
        demandType:
          type: array
          description: Occupancy for area
          items:
            $ref: '#/components/schemas/DemandType'
        demandSpaceType:
          type: array
          description: Occupancy for single spaces
          items:
            $ref: '#/components/schemas/DemandSpaceType'

    DemandType:
      title: DemandType
      description: This table is dedicated to reporting on actual occupancy in an area.
      type: object
      x-package: place.occupancy
      properties:
        count:
          type: integer
          description: Number of occupied spaces.
          minimum: 0
        occupancyCalculation:
          $ref: '#/components/schemas/CalculationTypeEnum'
        percentage:
          type: number
          description: Percent of spaces occupied.
          format: float
          minimum: 0
          maximum: 100
        recordDateTime:
          description: When data in the record was compiled.
          $ref: '#/components/schemas/DateTime'
      required:
        - recordDateTime

    DemandSpaceType:
      title: DemandSpaceType
      description: Identifies when a space was occupied and for how long.
      type: object
      x-package: place.occupancy
      properties:
        detectionUpdateTime:
          description: Time of update, from detector.
          $ref: '#/components/schemas/DateTime'
        occupancyEstimatedStartTime:
          description: The estimated time a space is expected to be occupied.
          $ref: '#/components/schemas/DateTime'
        occupancyEstimatedEndTime:
          description: The estimated time a space is expected to be vacated.
          $ref: '#/components/schemas/DateTime'
        occupancyStartTime:
          description: The actual time space is occupied.
          $ref: '#/components/schemas/DateTime'
        occupancyEndTime:
          description: The actual time space is vacated.
          $ref: '#/components/schemas/DateTime'
        spaceId:
          $ref: '#/components/schemas/Reference'
        occupancyLevel:
          $ref: '#/components/schemas/OccupancyLevel'
      required:
        - detectionUpdateTime

    OccupancyLevel:
      title: OccupancyLevel
      description: Defines an occupancy level as specified by the data supplier.
      type: object
      x-package: place.occupancy
      properties:
        occupancyIndicator:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
      required:
        - occupancyIndicator

    Supply:
      title: Supply
      description: |-
        A class defining concepts relating the parameters of the supply of parking. 
        This is the total number of spaces usable for parking or other mobility operations. 
        It can be defined as demarcated spaces or non-demarcated.
      type: object
      x-package: place.occupancy
      properties:
        supplyViewType:
          $ref: '#/components/schemas/SupplyViewTypeEnum'
        supplyQuantity:
          type: integer
          description: Indicates the numeric value of available parking or other space uses.
        supplyValidityStart:
          description: Valid start date/time for the supply
          $ref: '#/components/schemas/DateTime'
        supplyValidityEnd:
          description: Valid end date/time for the supply
          $ref: '#/components/schemas/DateTime'
      required:
        - supplyQuantity
        - supplyViewType

    #=== Place - Service ===#

    AuthenticationAndIdentificationEnum:
      title: AuthenticationAndIdentificationEnum
      description: |-
        A table of authentication and/or identification methods: 
        * activeRFIDChip: Phone (active RFID chip)
        * apps: Apps
        * calypso: RFID Calypso
        * cashPayment: No specific authentication by using cash
        * creditCard: Credit card
        * debitCard: Debit card
        * mifareClassic: RFID Card / Phone NFC - Mifare Classic
        * mifareDesfire: RFID Card / Phone NFC - Mifare Desfire
        * nfc: Nearfield communication
        * noAccess: No access granted
        * overTheAir: Over the air according to ISO 15118
        * phoneDialog: phone (dialog with platform)
        * phoneSMS: Phone (SMS)
        * pinpad: PINPAD
        * plc: PLC according to ISO 15118
        * prepaidCard: Pre-Paid card
        * rfid: RFID
        * unlimitedAccess: No authentication/identification required.
        * website: Using a website
      type: string
      x-package: place.service.enums
      enum:
        - activeRFIDChip
        - apps
        - calypso
        - cashPayment
        - creditCard
        - debitCard
        - mifareClassic
        - mifareDesfire
        - nfc
        - noAccess
        - overTheAir
        - phoneDialog
        - phoneSMS
        - pinpad
        - plc
        - prepaidCard
        - rfid
        - unlimitedAccess
        - website

    ChargingModeEnum:
      title: ChargingModeEnum
      description: |-
        Charging mode according to IEC-61851 terminology
        * ccs: Charging with a combined charging solution (CCS). AC and DC are used simultaneously.
        * legacyInductive: Legacy-Inductive
        * mode1AC1p: Mode 1, AC 1 phase
        * mode1AC3p: Mode 1, AC 3 phases
        * mode2AC1p: Mode 2, AC 1 phase
        * mode2AC3p: Mode 2, AC 3 phases
        * mode3AC3p: Mode 3, AC 3 phases
        * mode4DC: Mode 4, DC
        * other: Some other charging mode
        * unknown: The type of the charging mode is unknown
      type: string
      x-package: place.service.enums
      enum:
        - ccs
        - legacyInductive
        - mode1AC1p
        - mode1AC3p
        - mode2AC1p
        - mode2AC3p
        - mode3AC3p
        - mode4DC
        - other
        - unknown

    ChargingPointUsageTypeEnum:
      title: ChargingPointUsageTypeEnum
      description: |-
        Type of usage for an electric charging point
        * electricalDevices: Provides a plug for electrical devices (e.g. shaver, mobile phones, hair dryer, ...)
        * electricBike: Charging of E-Bikes
        * electricBoat: Charging of electric boats
        * electricMotorcycle: Charging of E-Motorcycles
        * electricVehicle: Charging of electric vehicles
        * lorryPowerConsumption: Supply for lorries with power consumption, e.g. for refrigerated goods transports.
        * motorhomeOrCaravanSupply: Supply for motorhomes or caravans
        * other: Other usage for the electric charging stations.
        * overheadLineDrivenVehicles: The charging point supplies a overhead line, usually connected via pantographs
      type: string
      x-package: place.service.enums
      enum:
        - electricalDevices
        - electricBike
        - electricBoat
        - electricMotorcycle
        - electricVehicle
        - lorryPowerConsumption
        - motorhomeOrCaravanSupply
        - other
        - overheadLineDrivenVehicles

    ConnectorFormatTypeEnum:
      title: ConnectorFormatTypeEnum
      description: |
        A list of cable types used during the charging process.
        * cableMode2: The connector is an attached cable; the EV users car needs to have a fitting inlet for a mode 2 cable, common for most domestic sockets
        * cableMode3: The connector is an attached cable; the EV users car needs to have a fitting inlet for a mode 3 cable, can be used for Type 1 and Type 2 sockets.
        * otherCable: The connector is an attached cable; the EV users car needs to have a fitting inlet.
        * socket: The connector is a socket; the EV user needs to bring a fitting plug
      type: string
      x-package: place.service.enums
      enum:
        - cableMode2
        - cableMode3
        - otherCable
        - socket

    ConnectorTypeEnum:
      title: ConnectorTypeEnum
      description: |-
        A table of commonly used connectors / charging interfaces
        * cee3: CEE3, 230 V, 16 A
        * cee5: CEE5, 400 V, 16-63 A
        * chademo: CHAdeMO, 600 V DC. Used mostly in Japan.
        * domestic: A domestic socket of unspecified type. Applicable countries should be specified in seperate attribute.
        * domesticA: Domestic socket type A (mainly used in the USA, Canada, Mexico & Japan)
        * domesticB: Domestic socket type B (mainly used in the USA, Canada & Mexico)
        * domesticC: Domestic socket type C (commonly used in Europe, South America & Asia)
        * domesticD: Domestic socket type D (mainly used in India)
        * domesticE: Domestic socket type E (primarily used in France, Belgium, Poland, Slovakia & Czechia)
        * domesticF: Domestic socket type F (used almost everywhere in Europe & Russia, except for the UK & Ireland)
        * domesticG: Domestic socket type G (mainly used in the United Kingdom, Ireland, Malta, Malaysia, Singapore & the Arabian Peninsula)
        * domesticH: Domestic socket type H (used exclusively in Israel, the West Bank & the Gaza Strip)
        * domesticI: Domestic socket type I (mainly used in Australia, New Zealand, China & Argentina)
        * domesticJ: Domestic socket type J (used almost exclusively in Switzerland & Liechtenstein)
        * domesticK: Domestic socket type K (used almost exclusively in Denmark & Greenland)
        * domesticL: Domestic socket type L (used almost exclusively in Italy & Chile)
        * domesticM: Domestic socket type M (mainly used in South Africa)
        * domesticN: Domestic socket type N (used in Brazil and South Africa)
        * domesticO: Domestic socket type O (used exclusively in Thailand)
        * iec60309x2single16:  IEC 60309-2 Industrial Connector single phase 16 amperes (usually blue)
        * iec60309x2three16: IEC 60309-2 Industrial Connector three phase 16 amperes (usually red)
        * iec60309x2three32: IEC 60309-2 Industrial Connector three phase 32 amperes (usually red)
        * iec60309x2three64: IEC 60309-2 Industrial Connector three phase 64 amperes (usually red)
        * iec62196T1: IEC 62196 Type 1 "SAE J1772".  Mostly used in USA and Asia.
        * iec62196T1COMBO: Combo Type 1 based, DC
        * iec62196T2: IEC 62196 Type 2 "Mennekes" - 400 V, 16-63 A. Mandatory in Europe
        * iec62196T2COMBO: Combo Type 2 based, DC, Type 2 connector with extension for simultaneous DC-charging
        * iec62196T3A: IEC 62196 Type 3A
        * iec62196T3C: " IEC 62196 Type 3C ""Scame""  "
        * other: Other charging interface.
        * pantographBottomUp: On-board Bottom-up-Pantograph typically for bus charging
        * pantographTopDown: Off-board Top-down-Pantograph typically for bus charging
        * teslaConnectorAmerica: Tesla connector used in America (Tesla specific)
        * teslaConnectorEurope: Tesla Connector EU (modification of the Type 2 connector)
        * teslaR: Tesla Connector "Roadster"-type (round, 4 pin)
        * teslaS: Tesla Connector "Model-S"-type (oval, 5 pin)
        * yazaki: Yazaki, 400 VDC, 125 A, Asian standard.
      type: string
      x-package: place.service.enums
      enum:
        - cee3
        - cee5
        - chademo
        - domestic
        - domesticA
        - domesticB
        - domesticC
        - domesticD
        - domesticE
        - domesticF
        - domesticG
        - domesticH
        - domesticI
        - domesticJ
        - domesticK
        - domesticL
        - domesticM
        - domesticN
        - domesticO
        - iec60309x2single16
        - iec60309x2three16
        - iec60309x2three32
        - iec60309x2three64
        - iec62196T1
        - iec62196T1COMBO
        - iec62196T2
        - iec62196T2COMBO
        - iec62196T3A
        - iec62196T3C
        - other
        - pantographBottomUp
        - pantographTopDown
        - teslaConnectorAmerica
        - teslaConnectorEurope
        - teslaR
        - teslaS
        - yazaki

    DeliveryUnitEnum:
      title: DeliveryUnitEnum
      description: |-
        Table with different units in which the delivery is measured.
        * gasGallonEquivalent: The amount of alternative fuel it takes to equal the energy content of one liquid gallon of gasoline. Used mostly in the US.
        * imperialGallon: Imperial Gallon (4.54609 litres)
        * kg: kilogram
        * kWh: kilowatt hour
        * litre: Litre
        * m3: cubic meter
        * usGallon: US-Gallon (3.785411784 litres)
      type: string
      x-package: place.service.enums
      enum:
        - gasGallonEquivalent
        - imperialGallon
        - kg
        - kWh
        - litre
        - m3
        - usGallon

    EquipmentTypeEnum:
      title: EquipmentTypeEnum
      description: |-
        Types of equipment.
        * bikeParking: Bike parking.
        * cashMachine: Cash machine.
        * copyMachineOrService: A possibility to create copies of documents.
        * defibrillator: Medical equipment to provide first aid after heart attacks.
        * dsrcReceiver: A system to manage digital short range communication (radio beacon transceivers), e.g. for tolling roadside equipment.
        * dumpingStation: Possibility to get rid of sewerage (especially for motorhomes).
        * electricChargingStation: For charging vehicles, motorhome supply etc. The 'numberOf...' attribute specifies the number of charging stations.
        * elevator: Indication of the availability of elevators.
        * faxMachineOrService: A possibility to send and/or receive faxes.
        * fireExtinguisher: Fire extinguisher
        * fireHose: A hose for water transport in case of fire.
        * fireHydrant: Fire hydrant
        * firstAidEquipment: Equipment to support first aid on injured people. Note that 'defibrillator' is a separate literal.
        * iceFreeScaffold: A technical equipment to remove ice and snow from the roof of lorries.
        * informationPoint: An information point with employees.
        * informationStele: An unmanned information point.
        * internetTerminal: Public internet terminal. Charges may be specified using the TariffsAndPayment section.
        * internetWireless: Public wireless internet. Specifying an amount would be the number of hotspots/access points. Charges may be specified using the TariffsAndPayment section.
        * luggageLocker: Possibility to deposit luggage in a safe way.
        * none: None.
        * other: Some other equipment. Use 'otherSupplementalFacility' to specify it.
        * paymentMachine: A payment machine, for example a parking ticket machine.
        * picnicFacilities: Indication of whether any picnicking facilities, such as tables, chairs and shaded areas, are available.
        * playground: A playground for children.
        * publicCardPhone: Indicates, whether there's a public telephone available that can be used with a card.
        * publicCoinPhone: Indicates, whether there's a public telephone available that can be used with coins.
        * publicPhone: Indicates, whether there's a public telephone available.
        * refuseBin: Refuse bins for small amounts of garbage (see also 'wasteDisposal').
        * safeDeposit: A possibility to store valuable possession in a safe way. 
        * shelter: A shelter (against wind, sun, ....).
        * shower: Indicates, whether there are shower facilities available.
        * snowAndIceRemovalEquipment: Equipment to remove snow and ice.nt
        * toilet: Indicates, whether there are toilets available.
        * tollTerminal: A terminal, where toll charges can be paid manually (this does not mean a toll gate on the road)
        * tyreAirPressureEquipment: Equipment to measure and refill tyre air pressure.
        * unknown: Unknown.
        * vendingMachine: A vending machine for snacks, coffee etc. (without manpower).
        * wasteDisposal: Possibility to get rid of waste in a legal way (e.g. for truckers or motorhomes). Normal refuse bins are not intended here.
        * waterBasin: A water basin to wash hands, clothes or dishes.
        * waterSupply: Supply of fresh water, e.g. for motorhomes.
        * waterTap: Fresh water out of a tap.
      type: string
      x-package: place.service.enums
      enum:
        - bikeParking
        - cashMachine
        - copyMachineOrService
        - defibrillator
        - dsrcReceiver
        - dumpingStation
        - electricChargingStation
        - elevator
        - faxMachineOrService
        - fireExtinguisher
        - fireHose
        - fireHydrant
        - firstAidEquipment
        - iceFreeScaffold
        - informationPoint
        - informationStele
        - internetTerminal
        - internetWireless
        - luggageLocker
        - none
        - other
        - paymentMachine
        - picnicFacilities
        - playground
        - publicCardPhone
        - publicCoinPhone
        - publicPhone
        - refuseBin
        - safeDeposit
        - shelter
        - shower
        - snowAndIceRemovalEquipment
        - toilet
        - tollTerminal
        - tyreAirPressureEquipment
        - unknown
        - vendingMachine
        - wasteDisposal
        - waterBasin
        - waterSupply
        - waterTap

    ReservationTypeEnum:
      title: ReservationTypeEnum
      description: |-
        Different types of reservation.
        * mandatory: Reservation is mandatory.
        * notAvailable: Reservation is not possible.
        * optional: Reservation is optional.
        * partly: There is a specific contingent, that can be reserved.
        * unknown: Possibility of reservation is unknown,
        * unspecified: Possibility of reservation is not specified.
      type: string
      x-package: place.service.enums
      enum:
        - mandatory
        - notAvailable
        - optional
        - partly
        - unknown
        - unspecified

    ServiceTypeEnum:
      title: ServiceTypeEnum
      description: |-
        A table of different service levels to be expected for fuelling/charging and payment.
        * fullService: Full fuelling service carried out by an employee.
        * selfService: Self Service for fuelling
        * unattended: Unattended station, fuelling and payment to be done without assistance.
      type: string
      x-package: place.service.enums
      enum:
        - fullService
        - selfService
        - unattended

    VehicleToGridCommunicationTypeEnum:
      title: VehicleToGridCommunicationTypeEnum
      description: |-
        * iec619802: Communication according to IEC 61980-2.
        * iso15118: Communication according to ISO15118.
        * none: No communication between vehicle and the grid.
        * other: Communication according to other guidelines/specifications.
        * unknown: The type of communication is unknown.
      type: string
      x-package: place.service.enums
      enum:
        - iec619802
        - iso15118
        - none
        - other
        - unknown

    Connector:
      title: Connector
      description: Parameters and description of an interface that is available at the given electric charging point to connect vehicles
      type: object
      x-package: place.service
      properties:
        chargingMode:
          $ref: '#/components/schemas/ChargingModeEnum'
        connectorFormat:
          $ref: '#/components/schemas/ConnectorFormatTypeEnum'
        connectorType:
          $ref: '#/components/schemas/ConnectorTypeEnum'
        countryOfDomesticSocket:
          type: array
          description: Countries for which the domestic socket is applicable. Only needed if explicit type of a domestic socket is not specified.
          items:
            $ref: '#/components/schemas/CountryCode'
        maximumCurrent:
          $ref: '#/components/schemas/Ampere'
        voltage:
          $ref: '#/components/schemas/Volt'
        maxPowerAtSocket:
          $ref: '#/components/schemas/Watt'
        otherConnector:
          type: string
          description: Some other connector / charging interface
      required:
        - connectorType
        - maxPowerAtSocket

    ElectricChargingPoint:
      title: ElectricChargingPoint
      description: A charging point for electric vehicles (EV).
      type: object
      x-package: place.service
      allOf:
        - $ref: '#/components/schemas/RefillPoint'
        - type: object
          properties:
            availableChargingPower:
              type: array
              description: Possible degrees of charging power in Watts.
              items:
                $ref: '#/components/schemas/Watt'
            externalIdentifier:
              type: string
              description: A unique string to identify the charging point.
            usageType:
              type: array
              description: Usage type of the electric charging point.
              items:
                $ref: '#/components/schemas/ChargingPointUsageTypeEnum'
            vehicleToGridCommunicationType:
              type: array
              description: Type of vehicle to grid communication used
              items:
                $ref: '#/components/schemas/VehicleToGridCommunicationTypeEnum'
            availableVoltage:
              type: array
              description: Possible degrees of voltage
              items:
                $ref: '#/components/schemas/Volt'
            connectors:
              type: array
              minItems: 1
              description: Specify the connector(s).
              items:
                $ref: '#/components/schemas/Connector'
          required:
            - connectors

    RefillPoint:
      title: RefillPoint
      description: Technical infrastructure at a specific location that facilitates an energy refilling process being connected
        to maximum one vehicle at a time.
      type: object
      x-package: place.service
      properties:
        authenticationAndIdentificationMethods:
          type: array
          description: Information on what methods of identification and/or authentication are accepted
          items:
            $ref: '#/components/schemas/AuthenticationAndIdentificationEnum'
        currencyOverride:
          type: array
          description: Information on which currency/currencies can be used to pay
          items:
            $ref: '#/components/schemas/CurrencyCode'
        deliveryUnit:
          $ref: '#/components/schemas/DeliveryUnitEnum'
        minimumDeliveryAmount:
          $ref: '#/components/schemas/Units'
        maximumDeliveryAmount:
          $ref: '#/components/schemas/Units'
        modelType:
          $ref: '#/components/schemas/MultilingualString'
        refillPointIndex:
          type: integer
          description: An index to link this element between the static and dynamic publications.
        reservability:
          $ref: '#/components/schemas/ReservationTypeEnum'
        serviceType:
          type: array
          description: Information on different service types for the fuelling/charging and payment process.
          items:
            $ref: '#/components/schemas/ServiceTypeEnum'
        userInterfaceLanguage:
          type: array
          description: 'Languages, in which a user interface is available, if any'
          items:
            $ref: '#/components/schemas/LanguageCode'
      required:
        - refillPointIndex

    #=== Right Specifications ===#

    CredentialTypeEnum:
      title: CredentialTypeEnum
      description: |-
        * barcode : barcode or QR digital print pattern, held on any physical media.
        * bluetooth : specific bluetooth or BLE identification chip used to associate a BLE receiver to a specific user.  Used for both one time and permit uses.
        * eticket : digital equivalent of a paper ticket, often presentable via smartphone or similar device for control.
        * hangtag : visible, often removable, credential indicator, with visible markings
        * licensePlate : fixed plate, in a defined format, used to identify a specific vehicle- Normally a permanent fixture.
        * permit : issued credential, often in the form of an adhesive label, often placed on the windscreen, credential indicator, with visible markings
        * qrCode : quick Reference (QR) code
        * rfid : specific RF identification associated to an RFID-related account.  Used for permit uses.
        * ticket : typically issued paper with printed details, often with magnetic strips; typically single use disposable.
        * electronicID : an identifier transmitted by electronic means
        * ticketcoupon : a visible printed or written paper-based ticket or coupon carrying an identifiable credential.
        * vehicleplate : a fixed identifier (registration plate) visible and fixed to a vehicle.
      type: string
      x-package: right_specification.enums
      enum:
        - barcode
        - bluetooth
        - eticket
        - hangtag
        - licensePlate
        - permit
        - qrCode
        - rfid
        - ticket
        - electronicID
        - ticketcoupon
        - vehicleplate

    RightSpecificationTypeEnum:
      title: RightTypeEnum
      description: |-
        Defines the type of RightSpecification
        * accessPermission : intended grant access permission
        * loadingUnloading : intended granting permissions to load and unload vehicles.
        * oneTimeUseParking : intended for one time or limited parking usage
        * permitParking : intended for multi-use parking usage
        * setDownPickup : intended for passenger set down and pick up
        * waiting : intended to grant permission for an accompanied vehicle to wait
      type: string
      x-package: right_specification.enums
      enum:
        - accessPermission
        - loadingUnloading
        - oneTimeUseParking
        - permitParking
        - setdownPickup
        - waiting

    RightSpecificationList:
      title: RightSpecificationList
      description: Paginated list of RightSpecifications
      type: object
      x-package: right_specification
      allOf:
        - $ref: "#/components/schemas/PaginatedList"
        - type: object
          properties:
            data:
              type: array
              description: List of RightSpecifications
              items:
                $ref: "#/components/schemas/RightSpecification"

    RightSpecification:
      title: RightSpecification
      description: Defines what the owner/manager of a place is granting the ability to do (e.g. park, delivery, pick up) to specific users or vehicles.
      type: object
      x-package: right_specification
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            description:
              $ref: '#/components/schemas/MultilingualString'
            type:
              $ref: '#/components/schemas/RightSpecificationTypeEnum'
            financialReference:
              type: string
              description: Creator defined free-text reference to financial transactions associated to the specific Right Specification.
            transferable:
              type: boolean
            transferableConditions:
              type: boolean
            credentials:
              type: array
              description: The allowed credential types for this RightSpecification
              items:
                $ref: '#/components/schemas/CredentialTypeEnum'
            validity:
              $ref: '#/components/schemas/Validity'
            expiry:
              type: string
              description: Date/time showing the timestamp for when a RightSpecification ceases to be valid.
              format: date-time
            rightPools:
              type: array
              description: Shares the number of AssignedRights that are available for use, are currently in use, or intended for use within a specific RightSpecification in specific date/time periods by a specific AssignedRightIssuer'
              items:
                $ref: '#/components/schemas/RightPool'
            issuer:
              readOnly: true
              $ref: '#/components/schemas/VersionedReference'
            hierarchyElements:
              type: array
              description: Reference to Places where this RightSpecification is available.
              minItems: 1
              items:
                $ref: '#/components/schemas/VersionedReference'
            rateEligibility:
              type: array
              description: |-
                Defines the combination of Eligibility requirements with RateTables and associates this combination to a RightSpecification. 
                RateEligibility enables a RightSpecification to have association to multiple RateTable(s) for a
                specific Eligibility ( or set of Qualifications). 
                RateEligibility also defines if RateTables are Combinable. 
                This is a Yes / No (Boolean) definition. 
                Either all RateTables associated to a RightSpecification with a common Eligibility can be combined or they cannot.
              items:
                $ref: '#/components/schemas/RateEligibility'
          required:
            - issuer
            - transferable
            - hierarchyElements

    RightPool:
      title: RightPool
      type: object
      x-package: right_specification
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            assignedRightsIssuer:
              readOnly: true
              $ref: '#/components/schemas/VersionedReference'
            distributedAssignedRights:
              type: integer
              description: Defines the number of AssignedRights that have been issued by the issuer.
            availableAssignedRights:
              type: integer
              description: Defines the number of AssignedRights that have been issued by the issuer that are still available to be assigned.
            qtyRelation:
              type: integer
              description: Defines the number of actions or parking included in a RightSpecification.
            relativeValidity:
              $ref: '#/components/schemas/RightPoolRelativeValidity'
            validity:
              $ref: '#/components/schemas/Validity'
          required:
            - assignedRightsIssuer
            - availableAssignedRights
            - distributedAssignedRights

    RightPoolRelativeValidity:
      title: RightPoolRelativeValidity
      type: object
      x-package: right_specification
      description: A specific calendar can be defined to represent the number of AssignedRights available for
        distribution in a specific recurring time period via RelativeValidity.
      properties:
        period:
          $ref: '#/components/schemas/Period'

    #=== Rate Tables ===#

    RateAvailabilityTypeEnum:
      title: RateAvailabilityTypeEnum
      description: |-
        * private : Parking access is limited to known and authorized individuals.
        * public : Open to the public. 
        * restricted : Open to the public but requires a direct purpose or permission to use from owner (e.g. Doctor's surgery, storefront...)"
      type: string
      x-package: rate.enums
      enum:
        - private
        - public
        - restricted

    RateLineTypeEnum:
      title: RateLineTypeEnum
      description: |-
        Describes the type of rates of a RateLine.
        * flatRate : A rate applied to the rate line which is not time/duration dependent. i.e. a single fixed payment.
        * flatRateTier : A flat rate charge rate associated with a specific time-based tier. This is a special case of an incrementing rate.
        * incrementingRate : A charge rate that increases by a defined amount in a defined time.
      type: string
      x-package: rate.enums
      enum:
        - flatRate
        - flatRateTier
        - incrementingRate

    RateTypeEnum:
      title: RateTypeEnum
      description: |-
        Describes the type of rates for a RateTable.
        * contract : Rate provided to contract holders only.
        * daily : Rate provided on a daily rate, per calendar day.
        * event : Rate provided in combination with a specific event.
        * hourly : Rate provided on an hourly basis.
      type: string
      x-package: rate.enums
      enum:
        - contract
        - daily
        - event
        - hourly

    RateUsageConditionsTypeEnum:
      title: RateUsageConditionsTypeEnum
      description: |
        A list of supported rate usage condition types.
        * fixedDuration : Fixed duration - check Rate Usage Duration Limitation field
        * fixedNumber : check Rate Usage Count Limitation field
        * once : Permit can be used once
        * unlimited : Unlimited usage.
      type: string
      x-package: rate.enums
      enum:
        - fixedDuration
        - fixedNumber
        - once
        - unlimited

    TriggerTypeEnum:
      title: TriggerTypeEnum
      description: |-
        * firstUse : Trigger is applied on first use of the facility.
        * withTransaction : Trigger condition is met when the transaction is completed.
      type: string
      x-package: rate.enums
      enum:
        - firstUse
        - withTransaction

    RateDiscount:
      title: RateDiscount
      description: Defines discount rates to be applied to a RateTable
      type: object
      x-package: rate
      properties:
        fixedValue:
          $ref: '#/components/schemas/AmountInCurrency'
        discountRate:
          type: number
          description: Proportionate discount (-) or surcharge (+) to be applied to all values in the referenced RateTable.
          minimum: 0
          maximum: 100
          format: float

    RateLine:
      title: RateLine
      description: |-
        Describes a specific line in a __RateTable__. __incrementPeriod__ represents the time period for incrementing the __RateLine__ charge. 
        If set to the same as the duration of the period between the __durationStart__ and __durationEnd__, the increment will occur once per period, i.e. a flat rate time-based tier charge rate.
      type: object
      x-package: rate
      allOf:
        - $ref: "#/components/schemas/VersionedIdentity"
        - type: object
          properties:
            sequence:
              type: integer
              description: The position of this rate line within a __RateLineCollection__
              minimum: 1
            rateLineType:
              $ref: '#/components/schemas/RateLineTypeEnum'
            description:
              $ref: '#/components/schemas/MultilingualString'
            durationStart:
              type: string
              description: If used, indicates the start time for the applicability of the specific RateLine, generally with respect to the start of the parking Session, e.g. the start of a time-based tier charge rate.
            durationEnd:
              type: string
              description: If used, indicates the end time for the applicability of the specific RateLine, generally with respect to the end of the parking or other mobility Session, e.g. the end of a time-based tier charge rate.
            incrementPeriod:
              $ref: '#/components/schemas/Duration'
            value:
              $ref: '#/components/schemas/AmountInCurrency'
            minValue:
              $ref: '#/components/schemas/AmountInCurrency'
            maxValue:
              $ref: '#/components/schemas/AmountInCurrency'
            usageCondition:
              $ref: '#/components/schemas/RateUsageConditionsTypeEnum'
            rateLineTax:
              $ref: '#/components/schemas/RateLineTax'
          required:
            - sequence
            - rateLineType
            - value

    RateLineCollection:
      title: RateLineCollection
      description: Describes a group of __RateLine__ elements that logically group together within one __RateTable__.
      type: object
      x-package: rate
      allOf:
        - $ref: "#/components/schemas/VersionedIdentity"
        - type: object
          properties:
            collectionSequence:
              type: integer
              description: An indicator giving the place in sequence of this RateLineCollection.
              minimum: 1
            applicableCurrency:
              $ref: '#/components/schemas/CurrencyCode'
            minTime:
              $ref: '#/components/schemas/Duration'
            maxTime:
              $ref: '#/components/schemas/Duration'
            resetTime:
              $ref: '#/components/schemas/Time'
            minValueCollection:
              $ref: '#/components/schemas/AmountInCurrency'
            maxValueCollection:
              $ref: '#/components/schemas/AmountInCurrency'
            validStart:
              type: string
              description: The start time for the validity of this RateLineCollection.
              format: date-time
            validEnd:
              type: string
              description: The end time for the validity of this RateLineCollection.
              format: date-time
            relativeTimes:
              type: boolean
              description: Indicates whether or not times that are relative to the start of an event are used as the basis for rate calculation (TRUE),
                or if parking rate calculation definitions are done with respect to the parking sessions and defined as local or UTC times (FALSE).
            referenceTimeStart:
              type: string
              format: date-time
              description: Event-related reference start time
            referenceTimeEnd:
              type: string
              format: date-time
              description: Event-related reference end time
            taxIncluded:
              type: boolean
              description: Indication that tax to be applied is included within the total rate associated with this rate line collection (true)
                or indicates that the tax is added additionally to the total.
            taxRate:
              type: number
              description: The percentage rate of tax to be applied.
              format: float
              minimum: 0
              maximum: 100
            taxValue:
              type: number
              description: The monetary amount of tax to be applied.
              format: float
            rateLines:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/RateLine'
          required:
            - collectionSequence
            - applicableCurrency
            - minTime
            - maxTime
            - resetTime
            - validStart
            - relativeTimes
            - taxIncluded
            - rateLines

    RateLineTax:
      title: RateLineTax
      description: Contains details of the tax to be applied to a RateLine.
      type: object
      x-package: rate
      properties:
        triggerDescription:
          $ref: '#/components/schemas/MultilingualString'
        triggerType:
          $ref: '#/components/schemas/TriggerTypeEnum'
        taxIncluded:
          type: boolean
          description: Indicates if the tax to be applied is included within the total rate associated with this rate line (TRUE) or if the tax is to be added additionally to the total (FALSE).
        labelForDisplay:
          $ref: '#/components/schemas/MultilingualString'
        taxRate:
          type: number
          description: The percentage rate of tax to be applied.
          format: float
          maximum: 100
          minimum: 0
        taxValue:
          $ref: '#/components/schemas/AmountInCurrency'
      required:
        - taxIncluded

    RateTable:
      title: RateTable
      description: Contains a specific set of rate line collection relating to one or more locations and optionally one set of eligibility criteria.
        rate table id refers to the internal identifier provided by the data supplier, and not the rate table unique identifier.
      type: object
      x-package: rate
      allOf:
        - $ref: "#/components/schemas/VersionedIdentity"
        - type: object
          properties:
            rateTableName:
              $ref: "#/components/schemas/MultilingualString"
            rateTableID:
              $ref: "#/components/schemas/MultilingualString"
            availability:
              $ref: "#/components/schemas/RateAvailabilityTypeEnum"
            rateResponsibleParty:
              readOnly: true
              $ref: "#/components/schemas/VersionedReference"
            rateSupersedeLink:
              $ref: "#/components/schemas/VersionedReference"
            validation:
              type: boolean
              description: Indicates if validations are accepted when using this RateTable.
            rateType:
              $ref: "#/components/schemas/RateTypeEnum"
            additionalInformation:
              $ref: "#/components/schemas/Url"
            validityStart:
              type: string
              description: Validity start datetime of the RateTable when its pricing become active.
              format: date-time
            validityEnd:
              type: string
              description: Validity end datetime of RateTable when its pricing expire and are no longer used.
              format: date-time
            activeTimes:
              type: array
              minItems: 1
              description: Periods during which the RateTable is to be applied.
              items:
                $ref: "#/components/schemas/Duration"
            rateLineCollections:
              type: array
              description: List of RateLineCollection that defines this RateTable.
              minItems: 1
              items:
                $ref: "#/components/schemas/RateLineCollection"
          required:
            - rateTableName
            - availability
            - validityStart
            - activeTimes
            - rateLineCollections

    RateTableList:
      title: RateList
      description: Paginated list of Rates
      type: object
      x-package: rate
      allOf:
        - $ref: "#/components/schemas/PaginatedList"
        - type: object
          properties:
            data:
              type: array
              description: List of Rates
              items:
                $ref: "#/components/schemas/RateTable"

    #=== Rate Tables - Payment ===#

    MeansOfPaymentEnum:
      title: MeansOfPaymentEnum
      description: |-
        Means of payment
        * cashBillsOnly : Cash payment using bills only.
        * cashCoinsAndBills : Cash payment using bills and/or coins only.
        * cashCoinsOnly : Cash payment with coins only.
        * mobileAccount : Payment method using an app or other functions typically via a smartphone, to a linked bank or card account.
        * paymentCreditCard : Payment by electronic payment credit card which is a small plastic card issued by a bank, building society, or  other financial institution (ISO/IEC 7813 and other related standards), allowing the holder to purchase goods or services on credit.
        * paymentDebitCard : Payment by electronic payment debit card which is a small plastic card (ISO/IEC 7813 and other related standards), allowing the holder to transfer money electronically from their bank account when making a purchase.
        * paymentValueCard : Payment by electronic payment debit card which is a small plastic card (ISO/IEC 7813 and other related standards)  with a monetary value stored on the card itself, not that may not be linked to an external account maintained by a financial institution.
        * prepay : Advanced payment for parking right.
        * tollTag : Toll tag (RFID) or similar, with associated account.
        * unknown : Unknown.
      type: string
      x-package: rate.payment.enums
      enum:
        - cashBillsOnly
        - cashCoinsAndBills
        - cashCoinsOnly
        - mobileAccount
        - paymentCreditCard
        - paymentDebitCard
        - paymentValueCard
        - prepay
        - tollTag
        - unknown

    PaymentTimingEnum:
      title: PaymentTimingEnum
      description: |-
        Details of when payment is required.
        * other : Other.
        * payAfterExit : Payment on account
        * payAndExit : Pay directly at the exit with a payment card or other means of payment (usually, this payment card must have been used when entering as well).
        * payOnEntry : Pay at start of the parking session (e.g. for pay and display)
        * payPriorToExit : Pay at machine on foot prior to returning to vehicle and use payment ticket to exit.
        * prepay : Pay before entry
      type: string
      x-package: rate.payment.enums
      enum:
        - other
        - payAfterExit
        - payAndExit
        - payOnEntry
        - payPriorToExit
        - prepay

    PaymentTypeEnum:
      title: PaymentTypeEnum
      description: |-
        Indicates the nature of the payment made against an AssignedRight.
        * payment : Indicates financial payment made
        * validation : Indicates financial value offset through use of validation coupon or similar
      type: string
      x-package: rate.payment.enums
      enum:
        - payment
        - validation

    AmountInCurrency:
      title: AmountInCurrency
      description: A class supporting the definition of a unit of currency in a defined currency.
      type: object
      x-package: rate.payment
      properties:
        currencyType:
          description: The currency code.
          $ref: "#/components/schemas/CurrencyCode"
        currencyValue:
          type: number
          description: The amount of currency specified in the given currency code type.
          format: "float"
      required:
        - currencyType
        - currencyValue

    Payment:
      title: Payment
      description: Represents the record of payments for associated AssignedRight.
      type: object
      x-package: rate.payment
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            dateCollected:
              description: Datetime that the payment related to this financial transaction is recorded as being paid and collected.
              $ref: "#/components/schemas/DateTime"
            dateAuthorised:
              description: Datetime that the payment related to this financial transaction is authorised.
              $ref: "#/components/schemas/DateTime"
            serviceProvider:
              readOnly: true
              $ref: '#/components/schemas/VersionedReference'
            transactionID:
              type: string
              description: Identifier for the transaction (e.g. reservation number, credit card transaction reference) as agreed upon by the two entities sharing data.
            idCode:
              type: string
              description: User defined field to identity additional details such as customer account number or G/L account number.
            startPeriodCovered:
              type: string
              description: Note field to describe the start of the period a payment covers.
              format: date-time
            endPeriodCovered:
              type: string
              description: Note field to describe the end of the period a payment covers.
              format: date-time
            paymentLines:
              type: array
              description: A data class that enables transaction details to be accumulated.
              items:
                $ref: '#/components/schemas/PaymentLine'
          required:
            - serviceProvider
            - paymentLines

    PaymentLine:
      title: PaymentLine
      description: Enables transaction details to be accumulated based on the type of payment (ie, base fee, taxes, surcharges, etc)
      type: object
      x-package: rate.payment
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            # ==== MORE DETAILS ABOUT TYPE OF PaymentLine ==== ##
            identifierId:
              type: string
              description: Identifier for the transaction (e.g. reservation number, credit card transaction reference).
            idCode:
              type: string
              description: Unique cost code identifier, potentially agreed bi-laterally between data supplier and data receiver.
            paymentType:
              $ref: '#/components/schemas/PaymentTypeEnum'
            value:
              $ref: '#/components/schemas/AmountInCurrency'
          required:
            - paymentType
            - value

    PaymentMethod:
      title: PaymentMethod
      description: Provides information on the means of payment available
      type: object
      x-package: rate.payment
      properties:
        paymentMeans:
          type: array
          description: The means of payment available
          items:
            $ref: '#/components/schemas/MeansOfPaymentEnum'
        paymentMode:
          type: array
          description: Defines the timing of the parking or other mobility related payment
          items:
            $ref: '#/components/schemas/PaymentTimingEnum'
        brandsAcceptedCodeList:
          type: array
          description: List of accepted brands for payment cards (by code)
          items:
            $ref: '#/components/schemas/BrandsAcceptedCodeList'
        brandsAcceptedText:
          type: array
          description: List of accepted brands for payment cards (by name)
          items:
            $ref: '#/components/schemas/BrandsAcceptedText'

    MonetaryValue:
      title: MonetaryValue
      type: object
      description: Lightweight record of the monetary financial value of the associated AssignedRight (temporary).
        Service provider is entity responsible for selling/collecting fees associated to the AR.
      x-package:
        rate.payment
      properties:
        taxIncluded:
          type: boolean
          description: 'Whether tax included in monetary value, if yes (TRUE), if not (FALSE).'
        serviceProvider:
          $ref: '#/components/schemas/VersionedReference'
          readOnly: true
        value:
          $ref: '#/components/schemas/AmountInCurrency'
      required:
        - taxIncluded
        - serviceProvider
        - value

    BrandsAcceptedCodeList:
      title: BrandsAcceptedCodeList
      description: Use this class to describe details of the brands that are accepted.
      type: object
      x-package: rate.payment
      properties:
        brandsAcceptedList:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
      required:
        - brandsAcceptedList

    BrandsAcceptedText:
      title: BrandsAcceptedText
      description: Use this class to describe details of the brands that are accepted.
      type: object
      x-package: rate.payment
      properties:
        brandsAccepted:
          $ref: '#/components/schemas/MultilingualString'

    #=== Rate Tables - Eligibility ===#

    FuelTypeEnum:
      title: FuelTypeEnum
      description: |-
        Type of fuel used by a vehicle : 
        * all : All sort of fuel is accepted
        * battery : Battery
        * biodiesel : Biodiesel
        * diesel : Fuel used for compression - ignition (CI) engines
        * dieselBatteryHybrid : Diesel and battery hybrid
        * ethanol : Ethanol\n* hydrogen: Hydrogen
        * liquidGas : Liquid gas of any type including LPG
        * lpg : Liquid petroleum gas\n* methane: Methane gas
        * other : Other\n* petrol: Fuel used for positive-ignition (PI) engines
        * petrol95Octane : Petrol with 95 octane\n* petrol98Octane: Petrol with 98 octane
        * petrolBatteryHybrid : Petrol and battery hybrid
        * petrolLeaded : Leaded petrol
        * petrolUnleaded : Unleaded petrol
        * unknown : The sort of fuel is not known"
      type: string
      x-package: rate.eligibility.enums
      enum:
        - all
        - battery
        - biodiesel
        - diesel
        - dieselBatteryHybrid
        - ethanol
        - hydrogen
        - liquidGas
        - lpg
        - methane
        - other
        - petrol
        - petrol95Octane
        - petrol98Octane
        - petrolBatteryHybrid
        - petrolLeaded
        - petrolUnleaded
        - unknown

    LowEmissionLevelEnum:
      title: LowEmissionLevelEnum
      description: |-
        The emission level of a vehicle
        * freeOfEmission : Only vehicles that do not produce emissions (e.g. electric driven). Hybrid driven cars are allowed, when they switch to emission free mode within the considered situation
        * lowLevelEmission : Vehicles with low level emission
      type: string
      x-package: rate.eligibility.enums
      enum:
        - freeOfEmission
        - lowLevelEmission

    VehicleLoadTypeEnum:
      title: VehicleLoadTypeEnum
      description: |-
        * abnormalLoad : A load that exceeds normal vehicle dimensions in terms of height, length, width, gross vehicle weight or axle weight or any combination of these. Generally termed an "abnormal load".
        * ammunition : Ammunition.
        * chemicals : Chemicals of unspecified type.
        * combustibleMaterials : Combustible materials of unspecified type.
        * corrosiveMaterials : Corrosive materials of unspecified type.
        * debris : Debris of unspecified type.
        * empty : No load.
        * explosiveMaterials : Explosive materials of unspecified type.
        * extraHighLoad : A load of exceptional height.
        * extraLongLoad : A load of exceptional length.
        * extraWideLoad : A load of exceptional width.
        * fuel : Fuel of unspecified type.
        * glass : Glass.
        * goods : Any goods of a commercial nature.
        * hazardousMaterials : Materials classed as being of a hazardous nature.
        * liquid : Liquid of an unspecified nature.
        * livestock : Livestock.
        * materials : General materials of unspecified type.
        * materialsDangerousForPeople : Materials classed as being of a danger to people or animals.
        * materialsDangerousForTheEnvironment : Materials classed as being potentially dangerous to the environment.
        * materialsDangerousForWater : Materials classed as being dangerous when exposed to water (e.g. materials which may react exothermically with water).
        * oil : Oil.
        * ordinary : Materials that present limited environmental or health risk. Non-combustible, non-toxic, non-corrosive.
        * other : Other than as defined in this enumeration.
        * perishableProducts : Products or produce that will significantly degrade in quality or freshness over a short period of time.
        * petrol : Petrol or petroleum.
        * pharmaceuticalMaterials : Pharmaceutical materials.
        * radioactiveMaterials : Materials that emit significant quantities of electro-magnetic radiation that may present a risk to people, animals or the environment.
        * refrigeratedGoods : Refrigerated goods.
        * refuse : Refuse.
        * toxicMaterials : Materials of a toxic nature which may damage the environment or endanger public health.
        * vehicles : Vehicles of any type which are being transported.
      type: string
      x-package: rate.eligibility.enums
      enum:
        - abnormalLoad
        - ammunition
        - chemicals
        - combustibleMaterials
        - corrosiveMaterials
        - debris
        - empty
        - explosiveMaterials
        - extraHighLoad
        - extraLongLoad
        - extraWideLoad
        - fuel
        - glass
        - goods
        - hazardousMaterials
        - liquid
        - livestock
        - materials
        - materialsDangerousForPeople
        - materialsDangerousForTheEnvironment
        - materialsDangerousForWater
        - oil
        - ordinary
        - other
        - perishableProducts
        - petrol
        - pharmaceuticalMaterials
        - radioactiveMaterials
        - refrigeratedGoods
        - refuse
        - toxicMaterials
        - vehicles

    VehicleTypeEnum:
      title: VehicleTypeEnum
      description: |-
        * agriculturalVehicle : Vehicle normally used for agricultural purposes (e.g. tractor, combined harvester).
        * anyVehicle : Vehicle of any type.
        * articulatedBus : Articulated bus
        * articulatedTrolleyBus : Articulated trolley bus
        * articulatedVehicle : Articulated vehicle.
        * bicycle : Bicycle.
        * bus : Bus.
        * car : Vehicles designed and constructed for the carriage of passengers and comprising no more than eight seats (in addition to the driver seat), and having a maximum mass (technically permissible maximum laden mass) not exceeding 3.5 tons (M1).
        * caravan : Caravan.
        * carOrLightVehicle : Car or light vehicle.
        * carWithCaravan : Car towing a caravan.
        * carWithTrailer : Car towing a trailer.
        * constructionOrMaintenanceVehicle : Vehicle normally used for construction or maintenance purposes (e.g. digger, excavator, bulldozer, lorry mounted crane)
        * fourWheelDrive : Four wheel drive vehicle.
        * heavyDutyTransporter : A transporter for heavy duty (usually with abnormal dimensions).
        * heavyGoodsVehicle : Vehicles with a total weight above 3,500 kg (vehicle and load).
        * heavyGoodsVehicleWithTrailer : Heavy goods vehicle with trailer
        * heavyVehicle : Vehicle whose weight means it should be classed as a heavy vehicle
        * highSidedVehicle : High sided vehicle.
        * largeCar : Large car
        * largeGoodsVehicle : Vehicles for the carriage of goods and having a maximum mass exceeding 3.5 tonnes (belonging to class N2 when not exceeding 12 tonnes, otherwise class N3).
        * lightCommercialVehicle : Vehicles for the carriage of goods and having a maximum mass not exceeding 3.5 tonnes (class N1).
        * lightCommercialVehicleWithTrailer : Light goods vehicle with trailer
        * longHeavyLorry : A heavy lorry that is longer than normal.
        * lorry : Lorry of any type.
        * metro : Metro
        * minibus : Vehicles designed and constructed for the carriage of passengers, comprising more than eight seats (in addition to the driver seat), and having a maximum mass not exceeding 5 tonnes (class M2).
        * moped : Moped (a two wheeled motor vehicle characterized by a small engine typically less than 50cc and by normally having pedals).
        * motorcycle : Motorcycle.
        * motorcycleWithSideCar : Three wheeled vehicle comprising a motorcycle with an attached side car.
        * motorhome : motorhome
        * motorScooter : MotorScooter (a two wheeled motor vehicle characterized by a step-through frame and small diameter wheels).
        * other : Other than as defined in this enumeration.
        * passengerCar : Passenger car
        * smallCar : Small car
        * tanker : Vehicle with large tank for carrying bulk liquids.
        * threeWheeledVehicle : Three wheeled vehicle of unspecified type.
        * trailer : Trailer.
        * tram : Tram.
        * trolleyBus : Trolley bus
        * twoWheeledVehicle : Two wheeled vehicle of unspecified type.
        * unknown : Unknown.
        * van : Van.
        * vehicleWithCaravan : Vehicle (of unspecified type) towing a caravan.
        * vehicleWithCatalyticConverter : Vehicle with catalytic converter.
        * vehicleWithoutCatalyticConverter : Vehicle without catalytic converter.
        * vehicleWithTrailer : Vehicle (of unspecified type) towing a trailer.
        * withEvenNumberedRegistrationPlates : Vehicle with even numbered registration plate.
        * withOddNumberedRegistrationPlates : Vehicle with odd numbered registration plate.
      type: string
      x-package: rate.eligibility.enums
      enum:
        - agriculturalVehicle
        - anyVehicle
        - articulatedBus
        - articulatedTrolleyBus
        - articulatedVehicle
        - bicycle
        - bus
        - car
        - caravan
        - carOrLightVehicle
        - carWithCaravan
        - carWithTrailer
        - constructionOrMaintenanceVehicle
        - fourWheelDrive
        - heavyDutyTransporter
        - heavyGoodsVehicle
        - heavyGoodsVehicleWithTrailer
        - heavyVehicle
        - highSidedVehicle
        - largeCar
        - largeGoodsVehicle
        - lightCommercialVehicle
        - lightCommercialVehicleWithTrailer
        - longHeavyLorry
        - lorry
        - metro
        - minibus
        - moped
        - motorcycle
        - motorcycleWithSideCar
        - motorhome
        - motorScooter
        - other
        - passengerCar
        - smallCar
        - tanker
        - threeWheeledVehicle
        - trailer
        - tram
        - trolleyBus
        - twoWheeledVehicle
        - unknown
        - van
        - vehicleWithCaravan
        - vehicleWithCatalyticConverter
        - vehicleWithoutCatalyticConverter
        - vehicleWithTrailer
        - withEvenNumberedRegistrationPlates
        - withOddNumberedRegistrationPlates

    WeightTypeEnum:
      title: WeightTypeEnum
      description: |-
        Type of weight - describing the meaning of a vehicle weight value
        * actual : The weight is the actual weight of a specific vehicle
        * maximumPermitted : The weight is the maximum permitted weight for a vehicle
      type: string
      x-package: rate.eligibility.enums
      enum:
        - actual
        - maximumPermitted

    AssignRightTime:
      title: AssignRightTime
      description: Qualification criteria for eligibility based on the duration of time relative to a defined
        time based qualification related to an assigned right.
      type: object
      x-package: rate.eligibility
      properties:
        assignedRightTime:
          type: string
          description: Assigned right time
          format: date-time
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperatorEnum'
        unitOfTime:
          $ref: '#/components/schemas/UnitOfTimeEnum'
      required:
        - assignedRightTime
        - comparisonOperator
        - unitOfTime

    AssignedRightTimeRelative:
      title: AssignedRightTimeRelative
      description: Time based constrained for a Qualification (either specific times or relative offsets)
      type: object
      x-package: rate.eligibility
      discriminator:
        propertyName: metaType
        mapping:
          RelativeOffsets: '#/components/schemas/RelativeOffsets'
          RelativeTimes: '#/components/schemas/RelativeTimes'
          TimesOfDay: '#/components/schemas/TimesOfDay'
      properties:
        metaType:
          type: string
          enum:
            - RelativeOffsets
            - RelativeTimes
            - TimesOfDay

    Eligibility:
      title: Eligibility
      description: Defines one or several qualifications to be eligible to a specific RateTable.
      type: object
      x-package: rate.eligibility
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            description:
              $ref: '#/components/schemas/MultilingualString'
            eligibilityName:
              $ref: '#/components/schemas/MultilingualString'
            qualifications:
              type: array
              description: Describes the criteria to be eligible.
              items:
                $ref: '#/components/schemas/Qualification'
            rightHolders:
              type: array
              description: Represents a list of RightHolders that are automatically eligible for the specific RateTable.
              items:
                $ref: '#/components/schemas/AssignedRightHolder'

    Emissions:
      title: Emissions
      description: Emission characteristics of vehicles.
      type: object
      x-package: rate.eligibility
      properties:
        emissionClassification:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
        emissionClassificationOthers:
          type: array
          description: Some other (probably locally defined) value(s) for emission classification.
          items:
            type: string
        emissionLevel:
          $ref: '#/components/schemas/LowEmissionLevelEnum'

    GrossWeightCharacteristic:
      title: GrossWeightCharacteristic
      description: Gross weight characteristic of a vehicle.
      type: object
      x-package: rate.eligibility
      properties:
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperatorEnum'
        grossVehicleWeight:
          type: number
          description: The gross weight of the vehicle and its load, including any trailers (in Tonnes).
          format: float
          exclusiveMinimum: 0
        typeOfWeight:
          $ref: '#/components/schemas/WeightTypeEnum'
      required:
        - comparisonOperator
        - grossVehicleWeight
        - typeOfWeight

    HeightCharacteristic:
      title: HeightCharacteristic
      description: Height characteristic of a vehicle.
      type: object
      x-package: rate.eligibility
      properties:
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperatorEnum'
        vehicleHeight:
          type: number
          description: The height (in metres) of the highest part, excluding antennae, of an individual vehicle above the road surface.
          format: float
          exclusiveMinimum: 0
      required:
        - comparisonOperator
        - vehicleHeight

    LengthCharacteristic:
      title: LengthCharacteristic
      description: Length characteristic of a vehicle.
      type: object
      x-package: rate.eligibility
      properties:
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperatorEnum'
        vehicleLength:
          type: number
          description: The overall distance (in metres) between the front and back of an individual vehicle, including the length
            of any trailers, couplings or embedded features.
          format: float
          exclusiveMinimum: 0
      required:
        - comparisonOperator
        - vehicleLength

    LinkedRightSpecification:
      title: LinkedRightSpecification
      description: Time based constrained for a Qualification
      type: object
      x-package: rate.eligibility
      properties:
        assignedRightTimeRelative:
          description: earliest/latest start/end relative (via offsets) or specific (via times)
          $ref: '#/components/schemas/AssignedRightTimeRelative'
        qualifyingRightSpecification:
          description: held right specification to which this constraint relates
          $ref: '#/components/schemas/VersionedReference'
      required:
        - assignedRightTimeRelative
        - qualifyingRightSpecification

    Qualification:
      title: Qualification
      description: Defines a set of criteria used to test eligibility for using a specific RateTable.
      type: object
      x-package: rate.eligibility
      properties:
        freeToPark:
          type: boolean
          description: Indicates that a parking is free (TRUE) or not (FALSE).
        withReservation:
          type: boolean
          description: Indicates whether a reservation is required (TRUE) or not (FALSE).
        withMembership:
          type: boolean
          description: Indicates that a membership is required (TRUE) or not (FALSE).
        membershipNames:
          type: array
          description: Free-text description of the membership names.
          items:
            $ref: '#/components/schemas/MultilingualString'
        propulsionEnergyType:
          type: array
          description: Indicates fuel/energy types of eligible vehicles.
          items:
            $ref: '#/components/schemas/FuelTypeEnum'
        emissions:
          $ref: '#/components/schemas/Emissions'
        grossWeightCharacteristics:
          type: array
          description: Qualify based on the vehicle's min/max gross weight characteristics
          uniqueItems: true
          maxItems: 2
          items:
            $ref: '#/components/schemas/GrossWeightCharacteristic'
        heightCharacteristics:
          type: array
          description: Qualify based on the vehicle's min/max height characteristics
          uniqueItems: true
          maxItems: 2
          items:
            $ref: '#/components/schemas/HeightCharacteristic'
        lengthCharacteristics:
          type: array
          description: Qualify based on the vehicle's min/max gross length characteristics
          uniqueItems: true
          maxItems: 2
          items:
            $ref: '#/components/schemas/LengthCharacteristic'
        widthCharacteristics:
          type: array
          description: Qualify based on the vehicle's min/max gross width characteristics
          uniqueItems: true
          maxItems: 2
          items:
            $ref: '#/components/schemas/WidthCharacteristic'
        vehicleTypes:
          type: array
          description: Qualify based on the type of vehicle.
          items:
            $ref: '#/components/schemas/VehicleTypeEnum'
        vehicleLoads:
          type: array
          description: Qualify based on the type of load carried by the vehicle.
          items:
            $ref: '#/components/schemas/VehicleLoadTypeEnum'
        userQualifications:
          type: array
          description: User-defined user groups qualification
          items:
            $ref: '#/components/schemas/UserQualification'
        activeAssignedRight:
          $ref: '#/components/schemas/VersionedReference'
        linkedRightSpecification:
          $ref: '#/components/schemas/LinkedRightSpecification'
        paymentMethod:
          type: array
          description: Qualifying payment methods
          items:
            $ref: '#/components/schemas/PaymentMethod'
        memberOfOtherRateTable:
          type: boolean
          description: Indicates if this qualification can be used in with another RateTable (TRUE) or not (FALSE).
        rateTableMember:
          type: array
          description: Free-text description of other rate table membership
          items:
            type: string
        assignRightTimes:
          type: array
          description: Qualify based on min/max time duration from a right being assigned
          uniqueItems: true
          maxItems: 2
          items:
            $ref: '#/components/schemas/AssignRightTime'

    RateEligibility:
      title: RateEligibility
      description: Defines the combination of Eligibility requirements and RateTables to associate this combination to a RightSpecification.
      type: object
      x-package: rate.eligibility
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            priority:
              type: integer
              description: An integer value, starting at 1, indicating the order in which multiple relevant RateTables shall be considered, with 1 being the highest priority.
              minimum: 1
            combinable:
              type: boolean
              description: Indicates if all RateTables associated to a RightSpecification with a common Eligibility
                can be combined to establish a lowest cost tariff (TRUE) or they cannot be combined (FALSE).
            eligibility:
              $ref: '#/components/schemas/Eligibility'
            rateTable:
              $ref: '#/components/schemas/VersionedReference'
            rateDiscount:
              $ref: '#/components/schemas/RateDiscount'
          required:
            - eligibility

    UserQualification:
      title: UserQualification
      description: Defines user group characteristics
      type: object
      x-package: rate.eligibility
      properties:
        userGroup:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
      required:
        - userGroup

    WidthCharacteristic:
      title: WidthCharacteristic
      type: object
      x-package: rate.eligibility
      description: Width characteristic of a vehicle
      properties:
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperatorEnum'
        vehicleWidth:
          type: number
          format: float
          exclusiveMinimum: 0
          description: 'The maximum width of an individual vehicle, including any features embedded or fixed on it, in metres'
      required:
        - comparisonOperator
        - vehicleWidth

    #=== Sessions ===#

    Segment:
      title: Segment
      description: |-
        Segments enables a single __session__ to capture and report changes in __rates__ and __assigned rights__ during a its validity. A segment can only have one __assigned right__ and __rate__ associated to it and must always :
        * be associated to a __session__.
        * be associated to an __assigned right__ and to a specific __rate__ and __credential__ via the __assigned right__.
        * keep track of the version of the __assigned right__ (i.e. when a segment starts with one __assigned right__ and then is updated to a new __assigned right__ replacing the original at the end of the __segment__).
        * be associated with a __place__.
        * be associated to a __financial transaction__ data.
        * have a start and end time.
      type: object
      x-package: session
      allOf:
        - $ref: "#/components/schemas/VersionedIdentity"
        - type: object
          properties:
            actualStart:
              type: string
              format: date-time
            actualEnd:
              type: string
              format: date-time
            assignedRight:
              $ref: "#/components/schemas/VersionedReference"
            spaceId:
              $ref: "#/components/schemas/VersionedReference"
            validationType:
              type: array
              description: The form of validation (the nature of credential) that is used in conjunction with the specific segment.
              minItems: 1
              items:
                $ref: "#/components/schemas/CredentialTypeEnum"
            validationId:
              type: string
              description: Specific validation identification associated to the segment.
            credentialId:
              $ref: "#/components/schemas/Reference"
            notes:
              $ref: "#/components/schemas/MultilingualString"
          required:
            - actualStart
            - assignedRight
            - validationType

    Session:
      title: Session
      description: A session captures the actual use of an assigned right and includes start time, end time, credential, and other relevant data related to an operational transaction. A __session__ is not used for future activities, and is broken into one or multiple __segments__.
      type: object
      x-package: session
      allOf:
        - $ref: "#/components/schemas/VersionedIdentity"
        - type: object
          properties:
            actualStart:
              type: string
              format: date-time
              description: The date/time of the start of the session.
            actualEnd:
              type: string
              format: date-time
              description: The date/time of the end of the session.
            initiator:
              readOnly: true
              $ref: "#/components/schemas/VersionedReference"
            hierarchyElement:
              $ref: "#/components/schemas/VersionedReference"
            identifiedCredentials:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/CredentialAssigned"
            segments:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/Segment"
            identifiedVehicle:
              $ref: "#/components/schemas/VehicleAncillaryIdentification"
          required:
            - actualStart
            - initiator
            - identifiedCredentials
            - segments

    SessionList:
      title: SessionList
      description: Paginated list of Sessions
      type: object
      x-package: session
      allOf:
        - $ref: "#/components/schemas/PaginatedList"
        - type: object
          properties:
            data:
              type: array
              description: List of Sessions
              items:
                $ref: "#/components/schemas/Session"

    #=== Assigned Rights ===#

    IssueMethodTypeEnum:
      title: IssueMethodTypeEnum
      description: |-
        A list of the supported methods for issuing credentials.
        * electronic : electronically issued, traceable
        * permit : physical identifier, typically visibly mounted within vehicle
        * ticket : typically single use, paper based
      type: string
      x-package: assigned_right.enums
      enum:
        - electronic
        - ticket
        - permit

    AssignedRightList:
      title: AssignedRightList
      description: Paginated list of AssignedRights
      type: object
      x-package: assigned_right
      allOf:
        - $ref: "#/components/schemas/PaginatedList"
        - type: object
          properties:
            data:
              type: array
              description: List of AssignedRights
              items:
                $ref: "#/components/schemas/AssignedRight"

    AssignedRight:
      title: AssignedRight
      description: AssignedRight indicates the granting of a specific right specification to a specific right holder,
        and indicates one instance of a planned use of the right.
      type: object
      x-package: assigned_right
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            rightSpecification:
              $ref: '#/components/schemas/VersionedReference'
            rightHolder:
              $ref: '#/components/schemas/AssignedRightHolder'
            assignedRightIssuer:
              readOnly: true
              $ref: '#/components/schemas/VersionedReference'
            issueMethod:
              $ref: '#/components/schemas/IssueMethodTypeEnum'
            issuanceTime:
              type: string
              description: The datetime this AssignedRight was issued.
              format: date-time
            minutesAvailable:
              type: number
              description: Number of decimal minutes that are remaining for use under a specified AssignedRight.
              format: float
            minutesUsed:
              type: number
              description: Number of decimal minutes that have been used under a specified AssignedRight.
              format: float
            totalMinutes:
              type: number
              description: Number of decimal minutes that have been issued under a specified AssignedRight.
              format: float
            remainingValue:
              $ref: '#/components/schemas/AmountInCurrency'
            totalRightValue:
              $ref: '#/components/schemas/AmountInCurrency'
            instancesUsed:
              type: integer
              description: The total number of instances that have been used under a specified RightSpecification.
            instancesAvailable:
              type: integer
              description: The total number of instances that are available for use under a specified RightSpecification.
            totalInstances:
              type: integer
              description: The total number of instances that have been issued under a specified AssignedRight.
            expiry:
              type: string
              description: The datetime when the specific AssignedRight expires, and is not longer available for use.
              format: date-time
            plannedUses:
              type: array
              description: Planned future uses of this AssignedRight.
              items:
                $ref: '#/components/schemas/PlannedUse'
            payments:
              type: array
              description: Payments made for this AssignedRight.
              items:
                $ref: '#/components/schemas/Payment'
            monetaryValue:
              $ref: '#/components/schemas/MonetaryValue'
          required:
            - rightSpecification
            - rightHolder

    AssignedRightHolder:
      title: AssignedRightHolder
      description: Information concerning a specific holder of a granted right, corresponding to a defined __RightSpecification__.
      type: object
      x-package: assigned_right
      properties:
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/CredentialAssigned'

    PlannedUse:
      title: PlannedUse
      description: Represents a specific future instance of an AssignedRight.
      type: object
      x-package: assigned_right
      properties:
        startTime:
          type: string
          description: Datetime instance when a PlannedUse is considered to start, and be available for use.
          format: date-time
        endTime:
          type: string
          description: Datetime instance when a PlannedUse is considered to end, and no longer be available for use.
          format: date-time
        cancelTime:
          type: string
          description: Datetime instance when a specific PlannedUse has been cancelled by the RightHolder.
          format: date-time
        expiryTime:
          type: string
          description: Datetime instance when a PlannedUse expires, and is no longer available for use.
          format: date-time
        issuer:
          readOnly: true
          $ref: '#/components/schemas/VersionedReference'
        issuanceTime:
          type: string
          description: Date/time at which a specific PlannedUse instance was issued.
          format: date-time
        issueMethod:
          $ref: '#/components/schemas/IssueMethodTypeEnum'
        credentialsAssigned:
          type: array
          description: Credentials that might be used for the future AssignedRight.
          minItems: 1
          items:
            $ref: '#/components/schemas/CredentialAssigned'
      required:
        - startTime

    #=== Assigned Right - Credentials ===#

    CredentialAssignedTypeEnum:
      title: CredentialAssignedTypeEnum
      description: Defines the type of Credential for one AssignedRight.
      type: string
      x-package: assigned_right.credential
      enum:
        - customer
        - vehicle
        - other

    Credential:
      title: Credential
      description: Defines a form of credential that is applicable for a specific RightSpecification.
      type: object
      x-package: assigned_right.credential
      properties:
        type:
          $ref: "#/components/schemas/CredentialTypeEnum"
      required:
        - type

    CredentialAssigned:
      title: CredentialAssigned
      description: Defines a credential that is used for verification for one AssignedRight.
      type: object
      x-package: assigned_right.credential
      discriminator:
        propertyName: credentialAssignedType
        x-discriminator-default: VehicleCredential
        mapping:
          customer: '#/components/schemas/CustomerCredential'
          vehicle: '#/components/schemas/VehicleCredential'
          other: '#/components/schemas/OtherCredential'
      allOf:
        - $ref: "#/components/schemas/Credential"
        - type: object
          properties:
            credentialAssignedType:
              $ref: '#/components/schemas/CredentialAssignedTypeEnum'
            identifier:
              $ref: "#/components/schemas/Reference"
            issuer:
              $ref: "#/components/schemas/MultilingualString"
          required:
            - identifier
            - issuer
            - type

    CustomerCredential:
      title: CustomerCredential
      description: Details of a credential identifying a customer, like an individual or an organisation.
      type: object
      x-package: assigned_right.credential
      allOf:
        - $ref: "#/components/schemas/CredentialAssigned"

    OtherCredential:
      title: OtherCredential
      description: Details of a credential for identifying an entity other than a specific vehicle or customer.
      type: object
      x-package: assigned_right.credential
      allOf:
        - $ref: "#/components/schemas/CredentialAssigned"

    VehicleCredential:
      title: VehicleCredential
      description: Details of a credential identifying a specific vehicle.
      type: object
      x-package: assigned_right.credential
      allOf:
        - $ref: "#/components/schemas/CredentialAssigned"

    #=== Time ===#

    AccessAndEgressTypeEnum:
      title: AccessAndEgressTypeEnum
      description: Defines the type of access and egress for places.
      type: string
      x-package: time.enums
      enum:
        - accessAndEgressValidity
        - accessAndEgressPeriods

    DayEnum:
      title: DayEnum
      description: Defines permissible enumerations of identification of days within a week.
      type: string
      x-package: time.enums
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday

    MonthEnum:
      title: MonthEnum
      description: Defines permissible enumerations of identification of calendar months within a year.
      type: string
      x-package: time.enums
      enum:
        - january
        - february
        - march
        - april
        - may
        - june
        - july
        - august
        - september
        - october
        - november
        - december

    WeekOfMonthEnum:
      title: WeekOfMonthEnum
      description: |-
        Weeks of the month

        * `firstWeekOfMonth`: First week of the month
        * `secondWeekOfMonth`: Second week of the month
        * `thirdWeekOfMonth`: Third week of the month
        * `fourthWeekOfMonth`: Fourth week of the month
        * `fifthWeekOfMonth`: Fifth week of the month (at most only 3 days and non in February when not a leap year)
      type: string
      x-package: time.enums
      enum:
        - firstWeekOfMonth
        - secondWeekOfMonth
        - thirdWeekOfMonth
        - fourthWeekOfMonth
        - fifthWeekOfMonth

    PeriodsOrValidityTypeEnum:
      title: PeriodsOrValidityTypeEnum
      description: |-
        Collection of types for PeriodsOrValidity.
        * validity: using validity
        * periods: using periods
      type: string
      x-package: time.enums
      enum:
        - validity
        - periods

    SpecialDayTypeEnum:
      title: SpecialDayTypeEnum
      description: |-
        Collection of special types of days
        * dayBeforePublicHoliday: The day preceding a public holiday
        * dayFollowingPublicHoliday: A day following a public holiday
        * inLieuOfPublicHoliday: A holiday in lieu of a public holiday that falls on a weekend
        * longWeekendDay: A day between a public holiday and the weekend
        * other: Some other special day
        * publicEventDay: A day of a public event. You may use the publicEvent attribute to specify the corresponding event
        * publicHoliday: Public holiday A public holiday in general. You may use the PublicHoliday class to refer on a specific public holiday
        * schoolDay: A school day
        * schoolHolidays: A day within the school holidays
      type: string
      x-package: time.enums
      enum:
        - dayBeforePublicHoliday
        - dayFollowingPublicHoliday
        - inLieuOfPublicHoliday
        - longWeekendDay
        - other
        - publicEventDay
        - publicHoliday
        - schoolDay
        - schoolHolidays

    TimeUnitRelativeEnum:
      title: TimeUnitRelativeEnum
      description: |-
        A list of relativity operators for time units
        * `previous`
        * `current`
        * `next`
      type: string
      x-package: time.enums
      enum:
        - previous
        - current
        - next

    UnitOfTimeEnum:
      title: UnitOfTimeEnum
      description: The list of the supported units of measures of time.
      type: string
      x-package: time.enums
      enum:
        - year
        - month
        - week
        - day
        - hour
        - minute
        - second

    ValidityStatusEnum:
      title: ValidityStatusEnum
      description: |-
        Values of validity status that can be assigned to a described event, action or item.
        * active : The described event, action or item is currently active regardless of the definition of the validity time specification.
        * definedByValidityTimeSpec : The validity status of the described event, action or item is in accordance with the definition of the validity time specification.
        * planned : The described event, action or item is currently planned regardless of the definition of the validity time specification.
        * suspended : The described event, action or item is currently suspended, that is inactive, regardless of the definition of the validity time specification.
      type: string
      x-package: time.enums
      enum:
        - active
        - definedByValidityTimeSpec
        - planned
        - suspended

    AccessAndEgress:
      title: AccessAndEgress
      description: Time periods specified for access to or from a parking facility.
      type: object
      x-package: time
      discriminator:
        propertyName: accessAndEgressType
        mapping:
          accessAndEgressValidity: '#/components/schemas/AccessAndEgressValidity'
          accessAndEgressPeriods: '#/components/schemas/AccessAndEgressPeriods'
      properties:
        accessAndEgressType:
          $ref: '#/components/schemas/AccessAndEgressTypeEnum'
        exitPossibleAtAnyTime:
          type: boolean
          description: 'If true, specifies that the specified access is available for exit at all times.'
        entranceOpenTimeArea:
          type: array
          description: Entrance open time area
          items:
            $ref: '#/components/schemas/EntranceOpenTime'
        exitOpenTimeArea:
          type: array
          description: Exit open time area
          items:
            $ref: '#/components/schemas/ExitOpenTime'
      required:
        - accessAndEgressType

    AccessAndEgressValidity:
      title: AccessAndEgressValidity
      description: Defines an AccessAndEgress variant with validity.
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/AccessAndEgress'
        - type: object
          properties:
            validity:
              description: Specific validity information.
              $ref: '#/components/schemas/Validity'

    AccessAndEgressPeriods:
      title: AccessAndEgressPeriods
      description: Defines an AccessAndEgress variant with periods.
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/AccessAndEgress'
        - type: object
          properties:
            periods:
              type: array
              minItems: 1
              description: 'list of periods'
              items:
                $ref: '#/components/schemas/Period'

    OverallPeriod:
      title: OverallPeriod
      description: A continuous or discontinuous period of validity defined by overall bounding start and end times and
        the possible intersection of valid periods (potentially recurring) with the complement of exception periods (also potentially recurring).
      type: object
      x-package: time
      properties:
        overallStartTime:
          description: Start of bounding period of validity defined by date and time.
          $ref: '#/components/schemas/DateTime'
        overallEndTime:
          description: End of bounding period of validity defined by date and time.
          $ref: '#/components/schemas/DateTime'
        validPeriods:
          type: array
          description: A single time period, a recurring time `Period` period or a set of different recurring time
            periods during which validity is true.
          items:
            $ref: '#/components/schemas/Period'
        exceptionPeriods:
          type: array
          description: A single time period, a recurring time Period period or a set of different recurring time
            periods during which validity is false.
          items:
            $ref: '#/components/schemas/Period'
      required:
        - overallStartTime

    PeriodsOrValidity:
      title: PeriodsOrValidity
      description: Describes the mutually exclusive use of one Validity or one or more Periods.
      type: object
      x-package: time
      discriminator:
        propertyName: type
        mapping:
          validity: '#/components/schemas/ValidityAlias'
          periods: '#/components/schemas/PeriodsAlias'
      properties:
        type:
          $ref: '#/components/schemas/PeriodsOrValidityTypeEnum'
      required:
        - type

    PeriodsAlias:
      title: PeriodsAlias
      description: Represents an array of periods.
      type: object
      x-package: time
      allOf:
        - $ref: "#/components/schemas/PeriodsOrValidity"
        - type: object
          properties:
            periods:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/Period"

    ValidityAlias:
      title: ValidityAlias
      description: Represents a validity.
      type: object
      x-package: time
      allOf:
        - $ref: "#/components/schemas/PeriodsOrValidity"
        - type: object
          properties:
            validity:
              $ref: "#/components/schemas/Validity"

    Period:
      title: Period
      description: Defines a continuous time period or a set of discontinuous time periods defined by the intersection of a set of criteria all within an overall delimiting interval.
      type: object
      x-package: time
      properties:
        periodName:
          $ref: '#/components/schemas/MultilingualString'
        startOfPeriod:
          description: Start of the period.
          $ref: '#/components/schemas/DateTime'
        endOfPeriod:
          description: End of the period.
          $ref: '#/components/schemas/DateTime'
        recurringDayWeekMonthPeriod:
          type: array
          description: The list of days each month for the period. If empty, all year (7d/7).
          items:
            $ref: '#/components/schemas/DayWeekMonth'
        recurringSpecialDay:
          type: array
          description: The list of special days for the period.
          items:
            $ref: '#/components/schemas/SpecialDay'
        recurringTimePeriodOfDay:
          type: array
          description: The list of start and end time for each day. If empty, all day (24h/24).
          items:
            $ref: '#/components/schemas/TimePeriodOfDay'

    Validity:
      title: Validity
      description: Specification of validity, either explicitly or by a validity time period specification which may be discontinuous.
      type: object
      x-package: time
      properties:
        validityStatus:
          $ref: '#/components/schemas/ValidityStatusEnum'
        validityTimeSpecification:
          $ref: "#/components/schemas/OverallPeriod"
      required:
        - validityTimeSpecification

    TimePeriodOfDay:
      title: TimePeriodOfDay
      description: Specification of a continuous period of time within the same day.
      type: object
      x-package: time
      properties:
        startTimeOfPeriod:
          description: Start of time period.
          $ref: '#/components/schemas/Time'
        endTimeOfPeriod:
          description: End time of period.
          $ref: '#/components/schemas/Time'
      required:
        - startTimeOfPeriod
        - endTimeOfPeriod

    DayWeekMonth:
      title: DayWeekMonth
      description: Specification of periods defined by the intersection of days, weeks and months.
      type: object
      x-package: time
      properties:
        applicableDay:
          type: array
          uniqueItems: true
          maxItems: 7
          description: Applicable day of the week (1 to 7). All days of the week is expressed by non-inclusion of this attribute.
          items:
            $ref: '#/components/schemas/DayEnum'
        applicableMonth:
          type: array
          description: Applicable month of the year (1 to 12). All months of the year is expressed by non-inclusion of this attribute.
          uniqueItems: true
          maxItems: 12
          items:
            $ref: '#/components/schemas/MonthEnum'
        applicableWeek:
          type: array
          description: Applicable week of the month (1 to 5). All weeks of the month is expressed by non-inclusion of this attribute.
          uniqueItems: true
          maxItems: 5
          items:
            $ref: '#/components/schemas/WeekOfMonthEnum'

    SpecialDay:
      title: SpecialDay
      description: Specification of a special type of day, possibly also a public holiday. Can be country or region specific.
      type: object
      x-package: time
      discriminator:
        propertyName: specialDayType
        mapping:
          dayBeforePublicHoliday: '#/components/schemas/OtherSpecialDay'
          dayFollowingPublicHoliday: '#/components/schemas/OtherSpecialDay'
          inLieuOfPublicHoliday: '#/components/schemas/OtherSpecialDay'
          longWeekendDay: '#/components/schemas/OtherSpecialDay'
          other: '#/components/schemas/OtherSpecialDay'
          publicEventDay: '#/components/schemas/OtherSpecialDay'
          publicHoliday: '#/components/schemas/PublicHoliday'
          schoolDay: '#/components/schemas/OtherSpecialDay'
          schoolHolidays: '#/components/schemas/OtherSpecialDay'
      properties:
        specialDayType:
          $ref: '#/components/schemas/SpecialDayTypeEnum'
        intersectWithApplicableDays:
          type: boolean
          description: Indicates if the period is the intersection of applicable days and this special day (TRUE) or
            if it is the union of applicable days and this special day.
      required:
        - specialDayType
        - intersectWithApplicableDays

    PublicHoliday:
      title: PublicHoliday
      description: Specification of a specific public holiday in case `specialDayType` is set to `publicHoliday`.
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/SpecialDay'
        - type: object
          properties:
            publicHolidayName:
              $ref: '#/components/schemas/MultilingualString'
          required:
            - publicHolidayName

    OtherSpecialDay:
      title: OtherSpecialDay
      description: Specification of a other type of special day.
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/SpecialDay'

    Times:
      title: Times
      description: |-
        Defines forms of time period for specific purposes. 
        There are four distinct time domain concepts: 
        * Hours of operation (times at which the facility may be used)
        * Access and egress (times it is possible to enter and leave the facility)
        * Entrance open time
        * Exit open time
      type: object
      x-package: time
      properties:
        available24hours:
          type: boolean
          description: If [TRUE], the identified parking hierarchy entities is available 24 hours per day.
        openAllYear:
          type: boolean
          description: If [TRUE], the identified parking hierarchy entities is available every day each year.
        openingTimesNotSpecified:
          type: boolean
          description: If [TRUE], the time periods are not specified.
        openingTimesUnknown:
          type: boolean
          description: If [TRUE], the time periods are not known.
        accessAndEgress:
          type: array
          items:
            $ref: '#/components/schemas/AccessAndEgress'
        operatingTime:
          $ref: '#/components/schemas/OperatingTime'
      required:
        - available24hours
        - openAllYear
        - openingTimesNotSpecified
        - openingTimesUnknown

    EntranceOpenTime:
      title: EntranceOpenTime
      description: Specification of periods of times when parking entrance(s) are open for vehicle movements.
      type: object
      x-package: time
      $ref: '#/components/schemas/PeriodsOrValidity'

    ExitOpenTime:
      title: ExitOpenTime
      description: Specification of periods of times when parking exit(s) are open for vehicle movements.
      type: object
      x-package: time
      $ref: '#/components/schemas/PeriodsOrValidity'

    OperatingTime:
      title: OperatingTime
      description: Specification of periods or time when the parking operates, do not represents times of accessibility.
      type: object
      x-package: time
      $ref: '#/components/schemas/PeriodsOrValidity'

    TimesOfDay:
      title: TimesOfDay
      description: Definition of times used in a time-based constrained.
      type: object
      x-package: time
      properties:
        earliestStart:
          $ref: '#/components/schemas/Time'
        earliestEnd:
          $ref: '#/components/schemas/Time'
        latestStart:
          $ref: '#/components/schemas/Time'
        latestEnd:
          $ref: '#/components/schemas/Time'

    RelativeOffsets:
      title: RelativeOffsets
      description: |-
        Relative offsets definition used in a time-based constrained
      type: object
      x-package: time
      properties:
        earliestStartRelative:
          $ref: '#/components/schemas/Duration'
        earliestEndRelative:
          $ref: '#/components/schemas/Duration'
        latestStartRelative:
          $ref: '#/components/schemas/Duration'
        latestEndRelative:
          $ref: '#/components/schemas/Duration'

    RelativeTimes:
      title: RelativeTimes
      description: Relative times definition used in a time-based constrained
      type: object
      x-package: time
      properties:
        unit:
          $ref: '#/components/schemas/UnitOfTimeEnum'
        earliestStartRelative:
          $ref: '#/components/schemas/TimeUnitRelativeEnum'
        earliestEndRelative:
          $ref: '#/components/schemas/TimeUnitRelativeEnum'
        latestStartRelative:
          $ref: '#/components/schemas/TimeUnitRelativeEnum'
        latestEndRelative:
          $ref: '#/components/schemas/TimeUnitRelativeEnum'

    EventTypeEnum:
      title: EventTypeEnum
      type: string
      enum:
        - AssignedRightCreated
        - AssignedRightUpdated
        - AssignedRightDeleted
        - SessionCreated
        - SessionUpdated
        - SessionDeleted
        - SystemEvents

    EventSubscription:
      title: subscription to data events and/or system alerts
      type: object
      properties:
        endpoint:
          description: client-provided endpoint URL for receiving event messages
          $ref: '#/components/schemas/Url'
        topics:
          description: list of one or more topics that the client is subscribed to
          type: array
          items:
            $ref: '#/components/schemas/EventTypeEnum'

    MetricAggregatorTypeEnum:
      title: MetricAggregatorTypeEnum
      description: type of metric aggregator
      type: string
      enum:
        - sum
        - average
        - none

    MetricGranularityEnum:
      title: MetricGranularityEnum
      description: level of detail in a metric's data points
      type: string
      enum:
        - day
        - hour
        - minute
        - second

    DataPoint:
      title: DataPoint
      description: a data point within a metric record
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        primaryGroup:
          type: string
          description: primary grouping criterion
        secondaryGroup:
          type: string
          description: secondary grouping criterion
        value:
          oneOf:
            - type: number
            - type: string
            - type: object
              additionalProperties: true

    MetricFilterType:
      type: string
      enum:
        - service-provider
        - time-range

    MetricFilter:
      title: MetricFilter
      properties:
        type:
          $ref: '#/components/schemas/MetricFilterType'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        granularity:
          $ref: '#/components/schemas/MetricGranularityEnum'
        values:
          type: array
          items:
            oneOf:
              - type: string
              - type: number

    SystemMetric:
      title: SystemMetric
      description: a record describing a health and performance metric used in platform monitoring
      type: object
      x-package: observability
      properties:
        name:
          type: string
          description: unique name of the metric
          examples: ["npp.ingestion.dataset.sessions.count","npp.responsetime.average"]
        description:
          type: string
          description: human-readable name/description of the metric
          examples: ["number of recently received session records"]
        filters:
          type: array
          items:
            $ref: '#/components/schemas/MetricFilter'
        aggregator:
            $ref: '#/components/schemas/MetricAggregatorTypeEnum'
        groupBy:
          type: array
          description: list of zero or more properties to group the data points by
          items:
            type: string
            enum:
              - service-provider
              - connected-supplier
              - operator
        dataPoints:
          type: array
          description: list of data points matching the provider filter criteria from the request
          items:
            $ref: '#/components/schemas/DataPoint'

    SystemAlertTypeEnum:
      title: SystemAlertTypeEnum
      description: |-
        the type of alert, one of  
        * triggered _(first time that the alert is reported)_
        * persistend _(the alert persists over a longer period of time and is hence re-confirmed to still be effective)_
        * resolved _(compensation event for a previous trigger)_
      type: string
      enum:
        - triggered
        - persistent
        - resolved

    ImpactTypeEnum:
      title: ImpactTypeEnum
      description: |-
        classifies the impact of an alert on the system as one of
        * responseTime _(the response time is currently not within the SLA boundaries, the system is in degraded mode)_
        * inventory _(the inventory API is temporarily not available, service providers will have to work with potentialy cached information or won't be able to issue parking rights/accept payments)_
        * rights _(the assigned rights API is temporarily not available; enforcement officers will potentially be lacking information and running the risk of issuing unjustified PCNs)_
        * sessions _(the sessions API is temporarily not available; sessions will not show in the Session Viewer application until the issue has been resolved and session data have been resubmitted)_
      type: string
      enum:
        - responseTime
        - inventory
        - rights
        - sessions

    SystemAlert:
      title: SystemAlert
      description: |-
          class for alerting external systems about a relevant event
      type: object
      properties:
        id:
          description: unique event id
          type: string
          examples: ["ec295d89-9b6c-45f0-9303-f477f1c692fc"]
        timestamp:
          description: timestamp of reporting the alert / status update
          type: string
          format: date-time
          examples: ["2025-05-01T23:17:02Z"]
        start:
          description: timestamp when the event first occurred
          type: string
          format: date-time
          examples: ["2025-05-01T23:16:02Z"]
        end:
          description: timestamp when the error condition was no longer true
          type: string
          format: date-time
          examples: ["2025-05-01T23:18:02Z"]
        type:
          $ref: '#/components/schemas/SystemAlertTypeEnum'
        metric:
          description: metric for which a trigger condition occurred
          type: string
          examples: ["npp.api.responsetime.average"]
        condition:
          description: condition that triggered the alert
          type: string
          examples: ["acceptable threshold of 10 seconds exceeded for more than 5 minutes"]
        description:
          description: free text with additional details, e.g. to be used in email communication or similar
          type: string
          examples: ["The average response time continues to be above the acceptable threshold of 10 seconds. The NPP team has identified the issue and is working on its resolution."]
        impact:
          description: list of one or more impact types that this alert has
          type: array
          items:
            $ref: '#/components/schemas/ImpactTypeEnum'
      examples: [
        {
          "id": "c7874361-cdca-467d-a389-f9ab6b8e411c",
          "timestamp": "2025-05-01T17:12:02Z",
          "start": "2025-05-01T17:11:52Z",
          "type": "triggered",
          "metric": "npp.api.responsetime.average",
          "condition": "acceptable threshold of 10 seconds exceeded for more than 5 minutes",
          "description": "The average response time continues to be above the acceptable threshold of 10 seconds. The NPP team has identified the issue and is working on its resolution.",
          "impact": ["responseTime"]
        }
      ]



